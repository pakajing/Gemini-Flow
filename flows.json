[
    {
        "id": "3887a97abab1ae29",
        "type": "tab",
        "label": "Secret Manager",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bb119fa58e5b3485",
        "type": "tab",
        "label": "Iconik to Gemini",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "97b77bc4b98052be",
        "type": "subflow",
        "name": "Get Global Secret",
        "info": "# Flow Get Secrets\r\n\r\n## Description\r\nThis flow retrieves secrets related to Confluence and Pinecone (email, token, URL, and API key) from the global context (`global.get`) and validates their presence. If any secret is missing, an error is returned with a descriptive message.\r\n\r\n## Input\r\n- **Trigger:**\r\n  - No specific input is required. The function node retrieves secrets from the global context.\r\n- **Context / Global Vars:**\r\n  - `SECRETS.confluence_email`\r\n  - `SECRETS.confluence_token`\r\n  - `SECRETS.confluence_url`\r\n  - `SECRETS.pinecone_ApiKey`\r\n- **Expected Secrets:**\r\n  - `confluence_email`: The email address for Confluence authentication.\r\n  - `confluence_token`: The API token for Confluence authentication.\r\n  - `confluence_url`: The base URL for the Confluence API.\r\n  - `pinecone_ApiKey`: The API key for Pinecone services.\r\n\r\n## Output\r\n- **Success Path:**\r\n  - If all secrets are present:\r\n    - `msg.secret` contains the retrieved secrets as an object:\r\n      ```json\r\n      {\r\n        \"confluence_email\": \"...\",\r\n        \"confluence_token\": \"...\",\r\n        \"confluence_url\": \"...\",\r\n        \"pinecone_apiKey\": \"...\"\r\n      }\r\n      ```\r\n    - `msg.statusCode` is set to `200`.\r\n    - The message is sent to Output 1.\r\n- **Error Path:**\r\n  - If any secret is missing:\r\n    - `msg.error` contains a descriptive error message (e.g., `Global.SECRETS.confluence_email is not set. Please Check Space SECRET`).\r\n    - `msg.statusCode` is set to `404`.\r\n    - The message is sent to Output 2.\r\n\r\n## Notes\r\n> - Ensure that the required secrets are properly configured in the global context before using this flow.\r\n> - This flow is critical for ensuring secure and authenticated interactions with Confluence and Pinecone APIs.\r\n\r\n## Author\r\n[Created by francois.brisson@qibb.com](mailto:francois.brisson@qibb.com)\r\n\r\n## qibb Docs\r\n[📚 qibb Platform Documentation](https://docs.qibb.com/platform/latest/)",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 220,
                "wires": [
                    {
                        "id": "3f9e95e7f7a71ea7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 180,
                "wires": [
                    {
                        "id": "3f9e95e7f7a71ea7",
                        "port": 0
                    }
                ]
            },
            {
                "x": 360,
                "y": 260,
                "wires": [
                    {
                        "id": "3f9e95e7f7a71ea7",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DEBD5C",
        "icon": "font-awesome/fa-database",
        "status": {
            "x": 280,
            "y": 80,
            "wires": [
                {
                    "id": "4f68b793021e13a7",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "0876dbcda80b1dec",
        "type": "subflow",
        "name": "Gemini",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "59b02e1c91e53481"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 760,
                "y": 40,
                "wires": [
                    {
                        "id": "2bbab8881ba82345",
                        "port": 0
                    }
                ]
            },
            {
                "x": 760,
                "y": 120,
                "wires": [
                    {
                        "id": "64b27d75ce428fdf",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#FFFFFF",
        "icon": "google-gemini-nodes/icon.svg",
        "status": {
            "x": 320,
            "y": 180,
            "wires": [
                {
                    "id": "03f3f26fe7caf8ee",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "fec23f0ed22e717d",
        "type": "subflow",
        "name": "Processing Video Option(s)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "38e1799bc51ee9bf"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1700,
                "y": 40,
                "wires": [
                    {
                        "id": "b7eb442e8678853c",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1700,
                "y": 120,
                "wires": [
                    {
                        "id": "cc05ebf194dc733c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "HIGHLIGHTS",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Highlights"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "KEYWORDS",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Keywords"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "SUMMARY",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Summary"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "CAPTIONING",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Video Captioning"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "ACTION_RECOGNITION",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Action Recognition"
                    },
                    "type": "checkbox"
                }
            }
        ],
        "meta": {},
        "color": "#FFFFFF",
        "icon": "google-gemini-nodes/icon.svg",
        "status": {
            "x": 280,
            "y": 180,
            "wires": [
                {
                    "id": "8cec81fe905fcb0c",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "269b642acef88503",
        "type": "group",
        "z": "bb119fa58e5b3485",
        "name": "[0] Webhook Receive",
        "style": {
            "label": true
        },
        "nodes": [
            "ccf39b06e755c073",
            "a403b999625db33d",
            "c94ee39be02badaa",
            "7fc236749081c4f8",
            "6ebb50cb76f0c2ec"
        ],
        "x": 54,
        "y": 39,
        "w": 362,
        "h": 262
    },
    {
        "id": "4e89c03817358d25",
        "type": "group",
        "z": "bb119fa58e5b3485",
        "name": "[2] Iconik Auth",
        "style": {
            "label": true
        },
        "nodes": [
            "80369f7995b0a4cc",
            "84e099d8f84ae022",
            "80b502eb86aee4bc",
            "f4319404be2c2735",
            "26f513247a55ca64",
            "73f1b5ffaabb36a3"
        ],
        "x": 714,
        "y": 39,
        "w": 252,
        "h": 262
    },
    {
        "id": "d29e7cdb2d5dd084",
        "type": "group",
        "z": "bb119fa58e5b3485",
        "name": "[0] Manual payload",
        "style": {
            "label": true
        },
        "nodes": [
            "inject_asset_id",
            "template_create_payload",
            "187792eede51b3c7",
            "4ba858c9bd77a3a7",
            "6ce865beef8237c8"
        ],
        "x": 54,
        "y": 319,
        "w": 272,
        "h": 202
    },
    {
        "id": "d69961b899aa3d05",
        "type": "group",
        "z": "bb119fa58e5b3485",
        "name": "[1] Get Secret",
        "style": {
            "label": true
        },
        "nodes": [
            "13443591230511c3",
            "7216e47d5518efdb",
            "29ee64773863c673",
            "b0f74a4e97da0dc1"
        ],
        "x": 434,
        "y": 39,
        "w": 252,
        "h": 262,
        "info": "# Flow Get Secrets\n\n## Description\nThis flow retrieves secrets related to Gemini and Iconik from the global context (`global.get`) and validates their presence. If any secret is missing, an error is returned with a descriptive message. The retrieved secrets are then packaged into a `msg.secret` object for further use.\n\n## Nodes\n| Node ID | Node Type | Node Name |\n|---------|-----------|-----------|\n| 4f68b793021e13a7 | status     | (Unnamed) |\n| 3f9e95e7f7a71ea7 | function   | Get Secrets |\n| f9847233de5b9a97 | comment    | [1] 📖 Doc - Get Secrets |\n\n## Input\n- **Trigger:**\n  - No specific input is required. The function node retrieves secrets from the global context.\n- **Context / Global Vars:**\n  - `SECRETS.GEMINI_API_KEY`\n  - `SECRETS.GEMINI_MODEL`\n  - `SECRETS.ICONIK_BASE_URL`\n  - `SECRETS.ICONIK_PASSWORD`\n  - `SECRETS.ICONIK_USERNAME`\n\n## Output\n- **Success Path:**\n  - If all secrets are present:\n    - `msg.secret` contains the retrieved secrets as an object:\n      ```json\n      {\n        \"GeminiApiKey\": \"...\",\n        \"GeminiModel\": \"...\",\n        \"IconikBaseUrl\": \"...\",\n        \"IconikPassword\": \"...\",\n        \"IconikUsername\": \"...\"\n      }\n      ```\n    - `msg.statusCode` is set to `200`.\n    - The message is sent to Output 1.\n- **Error Path:**\n  - If any secret is missing:\n    - `msg.error` contains a descriptive error message (e.g., `Global.SECRETS.GEMINI_API_KEY is not set. Please Check Space SECRET`).\n    - `msg.statusCode` is set to `404`.\n    - The message is sent to Output 2.\n\n## Notes\n> - Ensure that the required secrets are properly configured in the global context before using this flow.\n> - This flow is critical for ensuring secure and authenticated interactions with Gemini and Iconik APIs.\n\n## Author\n[Created by francois.brisson@qibb.com](mailto:francois.brisson@qibb.com)\n\n## qibb Docs\n[📚 qibb Platform Documentation](https://docs.qibb.com/platform/latest/)"
    },
    {
        "id": "918806d2d79fe6e6",
        "type": "group",
        "z": "bb119fa58e5b3485",
        "name": "[3] Iconik Get Format",
        "style": {
            "label": true
        },
        "nodes": [
            "d7f2baca4a091580",
            "f60f93918df2a827",
            "35b8dea63f9feb3a",
            "c1897c6216b8e8dc",
            "2bf0e9042e6659c6"
        ],
        "x": 994,
        "y": 39,
        "w": 292,
        "h": 262
    },
    {
        "id": "fd02e1eb88ae35ab",
        "type": "group",
        "z": "bb119fa58e5b3485",
        "name": "[4] Check MediaType",
        "style": {
            "label": true
        },
        "nodes": [
            "8e41cb773d695eb6",
            "62e2db5dec5eeda8",
            "c6921afbb473bc70",
            "016fac0e773e7897",
            "1af3f73061416777"
        ],
        "x": 1314,
        "y": 39,
        "w": 292,
        "h": 262
    },
    {
        "id": "55b3c47cc59469f5",
        "type": "group",
        "z": "bb119fa58e5b3485",
        "name": "[5] Get Proxies",
        "style": {
            "label": true
        },
        "nodes": [
            "378749f3f7f8db51",
            "7e2eb0fab7bc6a69",
            "c8e84af63e546d14",
            "8278629e61d3b099",
            "f4d3219677e48ac3"
        ],
        "x": 1634,
        "y": 39,
        "w": 252,
        "h": 262
    },
    {
        "id": "1eba5f0f11ebce0e",
        "type": "group",
        "z": "bb119fa58e5b3485",
        "name": "[6] Mediatype",
        "style": {
            "label": true
        },
        "nodes": [
            "60f01beb32c02861",
            "1912e80aa826d7f5",
            "c17bc71b9a4caec4",
            "c7bd865a40778920"
        ],
        "x": 434,
        "y": 359,
        "w": 252,
        "h": 242
    },
    {
        "id": "5f2970019d9fe440",
        "type": "group",
        "z": "bb119fa58e5b3485",
        "name": "[7] Download Proxy",
        "style": {
            "label": true
        },
        "nodes": [
            "e3df322b4395c4b8",
            "593245d270ac9b82",
            "7b587903328434c4",
            "a2ea3d519a01e1a1",
            "1a313660c43ee208",
            "8b15a63895cb51a3",
            "321a1621e0a7aed1"
        ],
        "x": 714,
        "y": 359,
        "w": 292,
        "h": 202
    },
    {
        "id": "2b021cccaf858ffb",
        "type": "group",
        "z": "bb119fa58e5b3485",
        "name": "Generate Gemini AI Content",
        "style": {
            "fill": "#001f60",
            "label": true,
            "fill-opacity": "0.5"
        },
        "nodes": [
            "fba603dcc61e0e8c",
            "e77a15478f3fd4a8",
            "4e556b99f052016d"
        ],
        "x": 514,
        "y": 1739,
        "w": 362,
        "h": 242
    },
    {
        "id": "7b9495278bbc1acd",
        "type": "group",
        "z": "bb119fa58e5b3485",
        "name": "[8] Upload File",
        "style": {
            "label": true
        },
        "nodes": [
            "aba3f61d19b83110",
            "5eedb1308b3932a6",
            "9f0e4b157f97680a",
            "43b5ac776f95284a",
            "20107de6bd37a1b5",
            "c6316525076d23bd"
        ],
        "x": 1034,
        "y": 359,
        "w": 252,
        "h": 242
    },
    {
        "id": "4f68b793021e13a7",
        "type": "status",
        "z": "97b77bc4b98052be",
        "name": "",
        "scope": null,
        "x": 160,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "3f9e95e7f7a71ea7",
        "type": "function",
        "z": "97b77bc4b98052be",
        "name": "Get Secrets",
        "func": "// Retrieve secrets from global context (Vault)\nvar GeminiApiKey = global.get(\"SECRETS.GEMINI_API_KEY\");\nvar GeminiModel = global.get(\"SECRETS.GEMINI_MODEL\");\nvar IconikBaseUrl = global.get(\"SECRETS.ICONIK_BASE_URL\");\nvar IconikPassword = global.get(\"SECRETS.ICONIK_PASSWORD\");\nvar IconikUsername = global.get(\"SECRETS.ICONIK_USERNAME\");\n\n// Check for each required secret individually\nif (!GeminiApiKey) {\n    node.error(\"❌ Global.SECRETS.GEMINI_API_KEY is not set. Please Check Space SECRET\");\n    msg.error = \"Global.SECRETS.GEMINI_API_KEY is not set. Please Check Space SECRET\";\n    msg.statusCode = 404;\n    return [null, msg]; \n}\n\nif (!GeminiModel) {\n    node.error(\"❌ Global.SECRETS.GEMINI_MODEL is not set. Please Check Space SECRET\");\n    msg.error = \"Global.SECRETS.GEMINI_MODEL is not set. Please Check Space SECRET\";\n    msg.statusCode = 404;\n    return [null, msg];\n}\n\nif (!IconikBaseUrl) {\n    node.error(\"❌ Global.SECRETS.ICONIK_BASE_URL is not set. Please Check Space SECRET\");\n    msg.error = \"Global.SECRETS.ICONIK_BASE_URL is not set. Please Check Space SECRET\";\n    msg.statusCode = 404;\n    return [null, msg];\n}\n\nif (!IconikPassword) {\n    node.error(\"❌ Global.SECRETS.ICONIK_PASSWORD is not set. Please Check Space SECRET\");\n    msg.error = \"Global.SECRETS.ICONIK_PASSWORD is not set. Please Check Space SECRET\";\n    msg.statusCode = 404;\n    return [null, msg];\n}\n\nif (!IconikUsername) {\n    node.error(\"❌ Global.SECRETS.ICONIK_USERNAME is not set. Please Check Space SECRET\");\n    msg.error = \"Global.SECRETS.ICONIK_USERNAME is not set. Please Check Space SECRET\";\n    msg.statusCode = 404;\n    return [null, msg];\n}\n\n// Construct the message secret\nmsg.secret = {\n    \"GeminiApiKey\": GeminiApiKey,\n    \"GeminiModel\": GeminiModel,\n    \"IconikBaseUrl\": IconikBaseUrl,\n    \"IconikPassword\": IconikPassword,\n    \"IconikUsername\": IconikUsername\n};\n\nmsg.statusCode = 200;\n\nreturn [msg, null]; // All good, send to output 1\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 220,
        "wires": [
            [],
            []
        ],
        "info": "# Flow Get Secrets\n\n## Description\nThis flow retrieves secrets related to Confluence and Pinecone (email, token, URL, and API key) from the global context (`global.get`) and validates their presence. If any secret is missing, an error is returned with a descriptive message.\n\n## Input\n- **Trigger:**\n  - No specific input is required. The function node retrieves secrets from the global context.\n- **Context / Global Vars:**\n  - `SECRETS.confluence_email`\n  - `SECRETS.confluence_token`\n  - `SECRETS.confluence_url`\n  - `SECRETS.pinecone_ApiKey`\n- **Expected Secrets:**\n  - `confluence_email`: The email address for Confluence authentication.\n  - `confluence_token`: The API token for Confluence authentication.\n  - `confluence_url`: The base URL for the Confluence API.\n  - `pinecone_ApiKey`: The API key for Pinecone services.\n\n## Output\n- **Success Path:**\n  - If all secrets are present:\n    - `msg.secret` contains the retrieved secrets as an object:\n      ```json\n      {\n        \"confluence_email\": \"...\",\n        \"confluence_token\": \"...\",\n        \"confluence_url\": \"...\",\n        \"pinecone_apiKey\": \"...\"\n      }\n      ```\n    - `msg.statusCode` is set to `200`.\n    - The message is sent to Output 1.\n- **Error Path:**\n  - If any secret is missing:\n    - `msg.error` contains a descriptive error message (e.g., `Global.SECRETS.confluence_email is not set. Please Check Space SECRET`).\n    - `msg.statusCode` is set to `404`.\n    - The message is sent to Output 2.\n\n## Notes\n> - Ensure that the required secrets are properly configured in the global context before using this flow.\n> - This flow is critical for ensuring secure and authenticated interactions with Confluence and Pinecone APIs.\n\n## Author\n[Created by francois.brisson@qibb.com](mailto:francois.brisson@qibb.com)\n\n## qibb Docs\n[📚 qibb Platform Documentation](https://docs.qibb.com/platform/latest/)"
    },
    {
        "id": "a1b2c3d4e5f67890",
        "type": "comment",
        "z": "97b77bc4b98052be",
        "name": "[1] 📖 Doc - Get Secrets",
        "info": "# Flow Get Secrets\n\n## Description\nThis flow retrieves secrets related to Gemini and Iconik from the global context (`global.get`) and validates their presence. If any secret is missing, an error is returned with a descriptive message. The retrieved secrets are then packaged into a `msg.secret` object for further use.\n\n## Nodes\n| Node ID | Node Type | Node Name |\n|---------|-----------|-----------|\n| 4f68b793021e13a7 | status     | (Unnamed) |\n| 3f9e95e7f7a71ea7 | function   | Get Secrets |\n| f9847233de5b9a97 | comment    | [1] 📖 Doc - Get Secrets |\n\n## Input\n- **Trigger:**\n  - No specific input is required. The function node retrieves secrets from the global context.\n- **Context / Global Vars:**\n  - `SECRETS.GEMINI_API_KEY`\n  - `SECRETS.GEMINI_MODEL`\n  - `SECRETS.ICONIK_BASE_URL`\n  - `SECRETS.ICONIK_PASSWORD`\n  - `SECRETS.ICONIK_USERNAME`\n\n## Output\n- **Success Path:**\n  - If all secrets are present:\n    - `msg.secret` contains the retrieved secrets as an object:\n      ```json\n      {\n        \"GeminiApiKey\": \"...\",\n        \"GeminiModel\": \"...\",\n        \"IconikBaseUrl\": \"...\",\n        \"IconikPassword\": \"...\",\n        \"IconikUsername\": \"...\"\n      }\n      ```\n    - `msg.statusCode` is set to `200`.\n    - The message is sent to Output 1.\n- **Error Path:**\n  - If any secret is missing:\n    - `msg.error` contains a descriptive error message (e.g., `Global.SECRETS.GEMINI_API_KEY is not set. Please Check Space SECRET`).\n    - `msg.statusCode` is set to `404`.\n    - The message is sent to Output 2.\n\n## Notes\n> - Ensure that the required secrets are properly configured in the global context before using this flow.\n> - This flow is critical for ensuring secure and authenticated interactions with Gemini and Iconik APIs.\n\n## Author\n[Created by francois.brisson@qibb.com](mailto:francois.brisson@qibb.com)\n\n## qibb Docs\n[📚 qibb Platform Documentation](https://docs.qibb.com/platform/latest/)",
        "x": 480,
        "y": 80,
        "wires": [],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "59b02e1c91e53481",
        "type": "http request",
        "z": "0876dbcda80b1dec",
        "name": "Gemini Request",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "x-goog-api-key",
                "valueType": "msg",
                "valueValue": "apiKey"
            }
        ],
        "x": 200,
        "y": 80,
        "wires": [
            [
                "8a1b82da44edc556"
            ]
        ]
    },
    {
        "id": "8a1b82da44edc556",
        "type": "switch",
        "z": "0876dbcda80b1dec",
        "name": "Success?",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 360,
        "y": 80,
        "wires": [
            [
                "2bbab8881ba82345"
            ],
            [
                "64b27d75ce428fdf"
            ]
        ]
    },
    {
        "id": "64b27d75ce428fdf",
        "type": "function",
        "z": "0876dbcda80b1dec",
        "name": "Set Error Status",
        "func": "const errorMsg = \"Gemini Error\"\nnode.status({fill:\"red\",shape:\"ring\",text:errorMsg});\nsetTimeout(() => {\n  node.status({});\n}, 2000);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "2bbab8881ba82345",
        "type": "function",
        "z": "0876dbcda80b1dec",
        "name": "Set Success Status",
        "func": "node.status({fill:\"green\",shape:\"ring\",text:\"Success\"});\nsetTimeout(() => {\n  node.status({});\n}, 2000);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "03f3f26fe7caf8ee",
        "type": "status",
        "z": "0876dbcda80b1dec",
        "name": "",
        "scope": null,
        "x": 200,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "a0d786322aa3b0e6",
        "type": "template",
        "z": "fec23f0ed22e717d",
        "name": "Set Prompt",
        "field": "userPrompt",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Using the provided video and selected options, generate text content that accurately represents the relevant details for each option while adhering to the given formats. \nEnsure that each object is formatted properly and that redundant information is avoided.\nDo not use Markdown formatting in your output.\n\nFor each selected option, use the corresponding format as outlined below:\n-Selected options: {{{selectedOptions}}}\n-Expected format: {{{formats}}}\n\nIf no relevant results are available for any selected option, return the following format: {{noResultsFormat}}, indicating that no relevant data could be generated for the option.",
        "output": "str",
        "x": 550,
        "y": 80,
        "wires": [
            [
                "273e62a62521a006"
            ]
        ]
    },
    {
        "id": "d991eb2e4d23ab66",
        "type": "change",
        "z": "fec23f0ed22e717d",
        "name": "Save Response",
        "rules": [
            {
                "t": "set",
                "p": "responseText.content",
                "pt": "msg",
                "to": "payload.candidates[0].content.parts[0].text",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "responseText.safetyRatings",
                "pt": "msg",
                "to": "payload.candidates[0].safetyRatings",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "responseUrl",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "userPrompt",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "url",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "apiKey",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "uploadResponse",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "mediaType",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "filename",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "model",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "mediaType",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "displayName",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "noResultsFormat",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "formats",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "statusCode",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "headers",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "fileUri",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "uploadFileName",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "retry",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "redirectList",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1420,
        "y": 40,
        "wires": [
            [
                "b7eb442e8678853c"
            ]
        ]
    },
    {
        "id": "38e1799bc51ee9bf",
        "type": "function",
        "z": "fec23f0ed22e717d",
        "name": "Check Selected Option",
        "func": "const highlights = env.get(\"HIGHLIGHTS\"); \nconst keywords = env.get(\"KEYWORDS\");\nconst summary = env.get(\"SUMMARY\");\nconst captioning = env.get(\"CAPTIONING\");\nconst actionRecognition = env.get(\"ACTION_RECOGNITION\")\nconst selectedOptions = [];\n\nmsg.model = global.get(\"SECRETS.GEMINI_MODEL\")\n\n// Determine the selected options\nif (highlights) {\n  selectedOptions.push(\"Highlights\");\n}\nif (keywords) {\n  selectedOptions.push(\"Keywords\");\n}\nif (summary) {\n  selectedOptions.push(\"Summary\");\n}\nif(captioning){\n  selectedOptions.push(\"Video Captioning\");\n}\nif(actionRecognition){\n  selectedOptions.push(\"Video Action Recognition\");\n}\n\nmsg.selectedOptions = selectedOptions\n\n// Validate that at least one option is selected\nif (!highlights && !keywords && !summary) {\n  const errorMsg = \"You must select at least one option\";\n  node.error(errorMsg);\n  node.status({ fill: \"red\", shape: \"ring\", text: errorMsg });\n  setTimeout(() => node.status({}), 2000);\n  return [null, msg];\n}\n\n// Validate the model presence\nif (!msg.model) {\n  const errorMsg = \"You must provide a Gemini Model\";\n  node.error(errorMsg);\n  node.status({ fill: \"red\", shape: \"ring\", text: errorMsg });\n  \n  setTimeout(() => node.status({}), 2000);\n  return [null, msg];\n}\n\nreturn [msg, null];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 100,
        "wires": [
            [
                "9f2d542864f19abd"
            ],
            [
                "cc05ebf194dc733c"
            ]
        ]
    },
    {
        "id": "273e62a62521a006",
        "type": "template",
        "z": "fec23f0ed22e717d",
        "name": "Set Payload",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "mustache",
        "template": "{\n    \"contents\": [\n        {\n            \"parts\": [\n                {\n                    \"fileData\": {\n                        \"mimeType\": \"{{{mediaType}}}\",\n                        \"fileUri\": \"{{{fileUri}}}\"\n                    }\n                }\n            ],\n            \"role\": \"user\"\n        },\n        {\n            \"parts\": [\n                {\n                    \"text\": \"{{{userPrompt}}}\"\n                }\n            ],\n            \"role\": \"user\"\n        }\n    ]\n}",
        "output": "json",
        "x": 710,
        "y": 80,
        "wires": [
            [
                "bb39e70e1554cbe9"
            ]
        ]
    },
    {
        "id": "8cec81fe905fcb0c",
        "type": "status",
        "z": "fec23f0ed22e717d",
        "name": "",
        "scope": null,
        "x": 180,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "cc05ebf194dc733c",
        "type": "function",
        "z": "fec23f0ed22e717d",
        "name": "Set Error Response",
        "func": "const errorMsg = \"Gemini Error\"\nnode.status({fill:\"red\",shape:\"ring\",text:errorMsg});\nsetTimeout(() => {\n  node.status({});\n}, 2000);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "17540a8355017c39",
        "type": "function",
        "z": "fec23f0ed22e717d",
        "name": "Set Success Response",
        "func": "node.status({fill:\"green\",shape:\"ring\",text:\"Success\"});\nsetTimeout(() => {\n  node.status({});\n}, 2000);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 40,
        "wires": [
            [
                "d991eb2e4d23ab66"
            ]
        ]
    },
    {
        "id": "9f2d542864f19abd",
        "type": "function",
        "z": "fec23f0ed22e717d",
        "name": "Set Formats ",
        "func": "const selectedOptions = msg.selectedOptions;\nconst outputFormats = {};\n\n// Check for Object Detection\nif (selectedOptions.includes(\"Highlights\")) {\n  const highlightsFormat = [\n    {\n      \"highlight\": \"[Brief description of the important moments]\",\n      \"timestamp\": \"[Timestamp for the start and end time of the highlight in the format HH:MM:SS]\",\n      \"duration\": \"Duration of the highlight in the video\"\n    }\n  ];\n  outputFormats.highlights = highlightsFormat;\n}\n\n// Check for Optical Character Recognition (OCR)\nif (selectedOptions.includes(\"Summary\")) {\n  const summaryFormat = \"Provide a detailed summary of the key events, scenes, and main content of the video\";\n  outputFormats.summary = summaryFormat;\n}\n\n// Check for Description\nif (selectedOptions.includes(\"Keywords\")) {\n  const keywordsFormat = [\n  \"Generate a list of most relevant keywords or topics related to the video content\"\n  ];\n  outputFormats.keywords = keywordsFormat;\n}\n\n// Check for Video Captioning \nif (selectedOptions.includes(\"Video Captioning\")){\n  const videoCaptioningFormat = [\n    {\n      \"timestamp\": \"[Time in the video, e.g., '00:01:23']\",\n      \"sceneDescription\": {\n        \"overall\": \"[Description of the environment, e.g., 'A sunny park with children playing in the background']\",\n        \"objects\": [\n          {\n            \"objectName\": \"[Name of detected object, e.g., 'dog', 'tree']\",\n            \"position\": \"[Position of the object in the frame, e.g., 'center', 'top-left']\"\n          }\n        ]\n      }\n    }\n  ]\n  outputFormats.videoCaptioning = videoCaptioningFormat\n}\n\n// Check for Video Action Recognition \nif (selectedOptions.includes(\"Video Action Recognition\")){\n  const actionRecognitionFormat = [\n    {\n      \"timestamp\": \"[Time in the video, e.g., '00:02:05']\",\n      \"action\": \"[Detected action, e.g., 'running', 'jumping', etc...]\",\n      \"subject\": \"[Who is performing the action, e.g., 'man', 'child']\",\n      \"duration\": \"[Duration of the action in seconds, e.g., '3.5 seconds']\",\n      \"objectInteraction\": \"[Object being interacted with, if any, e.g., 'holding a tennis racket']\"\n    }\n  ]\n  outputFormats.actionRecognition = actionRecognitionFormat\n}\n\n// No Results Format\nconst noResultsFormat = [\n  {\n    \"option\": \"[Selected option]\",\n    \"message\": \"No descriptive content could be generated for this image.\"\n  }\n];\n\nmsg.noResultsFormat = JSON.stringify(noResultsFormat, null, 2);\nconst formattedOutput = JSON.stringify(outputFormats, null, 2);\n\nmsg.formats = formattedOutput;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 80,
        "wires": [
            [
                "a0d786322aa3b0e6"
            ]
        ]
    },
    {
        "id": "bb39e70e1554cbe9",
        "type": "change",
        "z": "fec23f0ed22e717d",
        "name": "Set Url",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "https://generativelanguage.googleapis.com/v1beta/models/\" & model & \":generateContent",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "authHeaders",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "statusCode",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 80,
        "wires": [
            [
                "99b6ba68b4ce8716"
            ]
        ]
    },
    {
        "id": "b7eb442e8678853c",
        "type": "json",
        "z": "fec23f0ed22e717d",
        "name": "",
        "property": "responseText.content",
        "action": "",
        "pretty": false,
        "x": 1590,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "99b6ba68b4ce8716",
        "type": "subflow:0876dbcda80b1dec",
        "z": "fec23f0ed22e717d",
        "name": "",
        "x": 1020,
        "y": 80,
        "wires": [
            [
                "17540a8355017c39"
            ],
            [
                "cc05ebf194dc733c"
            ]
        ]
    },
    {
        "id": "413d709fa3d4b4a0",
        "type": "qibb-secret-manager-sync",
        "z": "3887a97abab1ae29",
        "name": "",
        "SYNC_PERIOD": "30min",
        "SYNC_ON_DEPLOY": true,
        "x": 120,
        "y": 40,
        "wires": []
    },
    {
        "id": "ccf39b06e755c073",
        "type": "http in",
        "z": "bb119fa58e5b3485",
        "g": "269b642acef88503",
        "name": "",
        "url": "webhooks/vision",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 200,
        "wires": [
            [
                "a403b999625db33d",
                "c94ee39be02badaa",
                "6ebb50cb76f0c2ec"
            ]
        ]
    },
    {
        "id": "a403b999625db33d",
        "type": "http response",
        "z": "bb119fa58e5b3485",
        "g": "269b642acef88503",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 235,
        "y": 260,
        "wires": [],
        "l": false
    },
    {
        "id": "c94ee39be02badaa",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "g": "269b642acef88503",
        "name": "Debug OK: Webhook Receive",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload.asset_ids[0]",
        "statusType": "msg",
        "x": 275,
        "y": 140,
        "wires": [],
        "icon": "font-awesome/fa-check-circle-o",
        "l": false
    },
    {
        "id": "7fc236749081c4f8",
        "type": "comment",
        "z": "bb119fa58e5b3485",
        "g": "269b642acef88503",
        "name": "[0] 📖 Doc - Webhook Receive",
        "info": "",
        "x": 200,
        "y": 80,
        "wires": [],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "80369f7995b0a4cc",
        "type": "change",
        "z": "bb119fa58e5b3485",
        "g": "4e89c03817358d25",
        "name": "Save Asset ID & Set Credentials",
        "rules": [
            {
                "t": "set",
                "p": "assetId",
                "pt": "msg",
                "to": "iconik.webhook.asset_ids[0]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 755,
        "y": 200,
        "wires": [
            [
                "80b502eb86aee4bc"
            ]
        ],
        "l": false
    },
    {
        "id": "84e099d8f84ae022",
        "type": "change",
        "z": "bb119fa58e5b3485",
        "g": "4e89c03817358d25",
        "name": "Save Auth Headers",
        "rules": [
            {
                "t": "set",
                "p": "authHeaders",
                "pt": "msg",
                "to": "headers",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 915,
        "y": 200,
        "wires": [
            [
                "f60f93918df2a827"
            ]
        ],
        "l": false
    },
    {
        "id": "f4319404be2c2735",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "g": "4e89c03817358d25",
        "name": "Debug Error: Auth Iconik",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 835,
        "y": 260,
        "wires": [],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "26f513247a55ca64",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "g": "4e89c03817358d25",
        "name": "Debug OK: Auth Iconik",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 835,
        "y": 140,
        "wires": [],
        "icon": "font-awesome/fa-check-circle-o",
        "l": false
    },
    {
        "id": "73f1b5ffaabb36a3",
        "type": "comment",
        "z": "bb119fa58e5b3485",
        "g": "4e89c03817358d25",
        "name": "[2] 📖 Doc - Iconik Auth",
        "info": "",
        "x": 840,
        "y": 80,
        "wires": [],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "inject_asset_id",
        "type": "inject",
        "z": "bb119fa58e5b3485",
        "g": "d29e7cdb2d5dd084",
        "name": "Inject Asset ID",
        "props": [
            {
                "p": "asset_id",
                "v": "be956cda-33bd-11ef-b5f6-ba90a050123b",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 115,
        "y": 480,
        "wires": [
            [
                "template_create_payload"
            ]
        ],
        "l": false
    },
    {
        "id": "template_create_payload",
        "type": "template",
        "z": "bb119fa58e5b3485",
        "g": "d29e7cdb2d5dd084",
        "name": "Build Full Payload",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n  \"user_id\": \"49c7bd08-0e06-11f0-a1f8-a6363a946122\",\n  \"system_domain_id\": \"9e392c9c-e28e-11ec-8906-82ba1484052f\",\n  \"context\": \"ASSET\",\n  \"action_id\": \"66ed6750-459f-11ef-afd9-1ec546efc4f6\",\n  \"asset_ids\": [\"{{asset_id}}\"],\n  \"collection_ids\": [],\n  \"saved_search_ids\": [],\n  \"metadata_view_id\": null,\n  \"metadata_values\": null,\n  \"date_created\": \"2025-06-04T07:20:34.362212\"\n}",
        "output": "json",
        "x": 175,
        "y": 480,
        "wires": [
            [
                "6ce865beef8237c8"
            ]
        ],
        "l": false
    },
    {
        "id": "187792eede51b3c7",
        "type": "comment",
        "z": "bb119fa58e5b3485",
        "g": "d29e7cdb2d5dd084",
        "name": "[0] 📖 Doc - Manual payload",
        "info": "",
        "x": 190,
        "y": 360,
        "wires": [],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "80b502eb86aee4bc",
        "type": "iconik-auth",
        "z": "bb119fa58e5b3485",
        "g": "4e89c03817358d25",
        "name": "",
        "ICONIK_BASE_URL": "https://app.iconik.io",
        "ICONIK_EMAIL": "r.holzhause@techtriq.com",
        "ICONIK_PASSWORD": {
            "type": "cred",
            "value": "ftoeK1ytV9iG89GEFZagD2vHfbLncmuA0t6uyzrvTEtoBTRPVzCB6br8UM3jvPzk"
        },
        "x": 835,
        "y": 200,
        "wires": [
            [
                "84e099d8f84ae022",
                "26f513247a55ca64"
            ],
            [
                "f4319404be2c2735"
            ]
        ],
        "l": false
    },
    {
        "id": "13443591230511c3",
        "type": "subflow:97b77bc4b98052be",
        "z": "bb119fa58e5b3485",
        "g": "d69961b899aa3d05",
        "name": "",
        "x": 555,
        "y": 200,
        "wires": [
            [
                "7216e47d5518efdb",
                "80369f7995b0a4cc"
            ],
            [
                "29ee64773863c673"
            ]
        ],
        "l": false,
        "info": "# Flow Get Secrets\n\n## Description\nThis flow retrieves Confluence-related secrets (email, token, and URL) from the global context (`global.get`) and validates their presence. If any secret is missing, an error is returned with a descriptive message.\n\n## Input\n- **Trigger:**\n  - No specific input is required. The function node retrieves secrets from the global context.\n- **Context / Global Vars:**\n  - `SECRETS.confluence_email`\n  - `SECRETS.confluence_token`\n  - `SECRETS.confluence_url`\n- **Expected Secrets:**\n  - `confluence_email`: The email address for Confluence authentication.\n  - `confluence_token`: The API token for Confluence authentication.\n  - `confluence_url`: The base URL for the Confluence API.\n\n## Output\n- **Success Path:**\n  - If all secrets are present:\n    - `msg.secret` contains the retrieved secrets as an object:\n      ```json\n      {\n        \"confluence_email\": \"...\",\n        \"confluence_token\": \"...\",\n        \"confluence_url\": \"...\"\n      }\n      ```\n    - `msg.statusCode` is set to `200`.\n    - The message is sent to Output 1.\n- **Error Path:**\n  - If any secret is missing:\n    - `msg.error` contains a descriptive error message (e.g., `Global.SECRETS.confluence_email is not set. Please Check Space SECRET`).\n    - `msg.statusCode` is set to `404`.\n    - The message is sent to Output 2.\n\n## Notes\n> - Ensure that the required secrets are properly configured in the global context before using this flow.\n> - This flow is critical for ensuring secure and authenticated interactions with the Confluence API.\n\n## Author\n[Created by francois.brisson@qibb.com](mailto:francois.brisson@qibb.com)\n\n## qibb Docs\n[📚 qibb Platform Documentation](https://docs.qibb.com/platform/latest/)\n"
    },
    {
        "id": "7216e47d5518efdb",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "g": "d69961b899aa3d05",
        "name": "Debug OK: Get Secret",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 555,
        "y": 140,
        "wires": [],
        "icon": "font-awesome/fa-check-circle-o",
        "l": false,
        "info": "# Flow Debug Get Secret\n\n## Description\nThis `Debug` node is used to verify the successful retrieval of secrets. It logs the full message object (`msg`) to the debug sidebar and displays the `msg.statusCode` in the node's status field for quick monitoring.\n\n## Input\n- **Trigger:**\n  - The node is triggered by the output of a preceding node in the flow, typically after a secret retrieval process.\n- **Context / Global Vars:** None required.\n- **Expected Secrets:** None required.\n\n## Output\n- **Success Path:**\n  - Logs the full incoming message (`msg`) to the debug sidebar.\n  - Displays the `msg.statusCode` in the node's status field for quick reference.\n  - Outputs the message for further processing if connected downstream.\n- **Error Path:**\n  - This node does not handle errors but can be used to inspect issues in the incoming message.\n\n## Notes\n> - The debug node is disabled by default. Enable it to view logs in the debug sidebar.\n> - Use this node during development or troubleshooting to ensure secrets are being retrieved and processed correctly.\n> - The `msg.statusCode` is displayed in the node's status field for quick monitoring of the HTTP response status.\n\n## Author\n[Created by francois.brisson@qibb.com](mailto:francois.brisson@qibb.com)\n\n## qibb Docs\n[📚 qibb Platform Documentation](https://docs.qibb.com/platform/latest/)\n"
    },
    {
        "id": "29ee64773863c673",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "g": "d69961b899aa3d05",
        "name": "Debug Error: Get Secret",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 555,
        "y": 260,
        "wires": [],
        "icon": "node-red/alert.svg",
        "l": false,
        "info": "# Flow Debug Error Get Secret\n\n## Description\nThis `Debug` node is used to log and inspect errors that occur during the secret retrieval process. It captures the full message object (`msg`) and displays the `msg.statusCode` in the node's status field for quick monitoring.\n\n## Input\n- **Trigger:**\n  - The node is triggered by the output of a preceding node in the flow, typically when an error occurs during secret retrieval.\n- **Context / Global Vars:** None required.\n- **Expected Secrets:** None required.\n\n## Output\n- **Success Path:**\n  - Logs the full incoming message (`msg`) to the debug sidebar for inspection.\n  - Displays the `msg.statusCode` in the node's status field for quick reference.\n  - Outputs the message for further processing if connected downstream.\n- **Error Path:**\n  - This node does not handle errors but is used to inspect and debug issues in the incoming message.\n\n## Notes\n> - The debug node is enabled by default to assist in troubleshooting.\n> - Use this node during development or troubleshooting to identify and resolve issues in the secret retrieval process.\n> - The `msg.statusCode` is displayed in the node's status field for quick monitoring of the HTTP response status.\n\n## Author\n[Created by francois.brisson@qibb.com](mailto:francois.brisson@qibb.com)\n\n## qibb Docs\n[📚 qibb Platform Documentation](https://docs.qibb.com/platform/latest/)\n"
    },
    {
        "id": "b0f74a4e97da0dc1",
        "type": "comment",
        "z": "bb119fa58e5b3485",
        "g": "d69961b899aa3d05",
        "name": "[1] 📖 Doc - Get Secret",
        "info": "# Flow Get Secrets\n\n## Description\nThis flow retrieves secrets related to Gemini and Iconik from the global context (`global.get`) and validates their presence. If any secret is missing, an error is returned with a descriptive message. The retrieved secrets are then packaged into a `msg.secret` object for further use.\n\n## Nodes\n| Node ID | Node Type | Node Name |\n|---------|-----------|-----------|\n| 4f68b793021e13a7 | status     | (Unnamed) |\n| 3f9e95e7f7a71ea7 | function   | Get Secrets |\n| f9847233de5b9a97 | comment    | [1] 📖 Doc - Get Secrets |\n\n## Input\n- **Trigger:**\n  - No specific input is required. The function node retrieves secrets from the global context.\n- **Context / Global Vars:**\n  - `SECRETS.GEMINI_API_KEY`\n  - `SECRETS.GEMINI_MODEL`\n  - `SECRETS.ICONIK_BASE_URL`\n  - `SECRETS.ICONIK_PASSWORD`\n  - `SECRETS.ICONIK_USERNAME`\n\n## Output\n- **Success Path:**\n  - If all secrets are present:\n    - `msg.secret` contains the retrieved secrets as an object:\n      ```json\n      {\n        \"GeminiApiKey\": \"...\",\n        \"GeminiModel\": \"...\",\n        \"IconikBaseUrl\": \"...\",\n        \"IconikPassword\": \"...\",\n        \"IconikUsername\": \"...\"\n      }\n      ```\n    - `msg.statusCode` is set to `200`.\n    - The message is sent to Output 1.\n- **Error Path:**\n  - If any secret is missing:\n    - `msg.error` contains a descriptive error message (e.g., `Global.SECRETS.GEMINI_API_KEY is not set. Please Check Space SECRET`).\n    - `msg.statusCode` is set to `404`.\n    - The message is sent to Output 2.\n\n## Notes\n> - Ensure that the required secrets are properly configured in the global context before using this flow.\n> - This flow is critical for ensuring secure and authenticated interactions with Gemini and Iconik APIs.\n\n## Author\n[Created by francois.brisson@qibb.com](mailto:francois.brisson@qibb.com)\n\n## qibb Docs\n[📚 qibb Platform Documentation](https://docs.qibb.com/platform/latest/)",
        "x": 560,
        "y": 80,
        "wires": [],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "4ba858c9bd77a3a7",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "g": "d29e7cdb2d5dd084",
        "name": "Debug OK: Manual Payload",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "iconik.webhook.asset_ids[0]",
        "statusType": "msg",
        "x": 255,
        "y": 420,
        "wires": [],
        "icon": "font-awesome/fa-check-circle-o",
        "l": false
    },
    {
        "id": "6ebb50cb76f0c2ec",
        "type": "change",
        "z": "bb119fa58e5b3485",
        "g": "269b642acef88503",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "iconik.webhook",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 375,
        "y": 200,
        "wires": [
            [
                "13443591230511c3"
            ]
        ],
        "l": false
    },
    {
        "id": "6ce865beef8237c8",
        "type": "change",
        "z": "bb119fa58e5b3485",
        "g": "d29e7cdb2d5dd084",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "iconik.webhook",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 255,
        "y": 480,
        "wires": [
            [
                "4ba858c9bd77a3a7",
                "13443591230511c3"
            ]
        ],
        "l": false
    },
    {
        "id": "d7f2baca4a091580",
        "type": "change",
        "z": "bb119fa58e5b3485",
        "g": "918806d2d79fe6e6",
        "name": "Save Media type",
        "rules": [
            {
                "t": "set",
                "p": "mediaType",
                "pt": "msg",
                "to": "iconik.output.payload.objects[0].metadata[0].internet_media_type",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "authHeaders",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "iconik.get_format",
                "pt": "msg",
                "to": "iconik.output",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1195,
        "y": 200,
        "wires": [
            [
                "62e2db5dec5eeda8"
            ]
        ],
        "l": false
    },
    {
        "id": "f60f93918df2a827",
        "type": "iconik-files-client",
        "z": "bb119fa58e5b3485",
        "g": "918806d2d79fe6e6",
        "name": "GET Asset Formats",
        "selectedOperation": {
            "method": "get",
            "path": "/v1/assets/{asset_id}/formats/",
            "summary": "Get all asset's formats",
            "description": "Get all asset's formats\n\nRequired roles:\n - can_read_formats\n",
            "tag": "Other",
            "operationId": "get_v1_assets__asset_id__formats_"
        },
        "api": "api-0",
        "errorHandlingModeSelectedIndex": 1,
        "security": [],
        "requestContentTypeSelectedIndex": 0,
        "responseContentTypeSelectedIndex": 0,
        "parameters": [
            {
                "name": "asset_id",
                "value": "asset_id",
                "in": "path",
                "refType": "msg"
            },
            {
                "name": "per_page",
                "value": "",
                "in": "query",
                "refType": "type"
            },
            {
                "name": "last_id",
                "value": "",
                "in": "query",
                "refType": "type"
            }
        ],
        "uiFeatures": {
            "operations": {
                "advancedMode": true
            }
        },
        "outputs": 2,
        "output": "iconik.output",
        "host": {
            "type": "string",
            "value": "",
            "refType": "type"
        },
        "x": 1115,
        "y": 200,
        "wires": [
            [
                "35b8dea63f9feb3a",
                "d7f2baca4a091580"
            ],
            [
                "c1897c6216b8e8dc"
            ]
        ],
        "l": false
    },
    {
        "id": "35b8dea63f9feb3a",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "g": "918806d2d79fe6e6",
        "name": "Debug OK: Iconik Get Format",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "iconik.output.statusCode",
        "statusType": "msg",
        "x": 1115,
        "y": 140,
        "wires": [],
        "icon": "font-awesome/fa-check-circle-o",
        "l": false
    },
    {
        "id": "c1897c6216b8e8dc",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "g": "918806d2d79fe6e6",
        "name": "Debug Error: Iconik Get Format",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "iconik.output.statusCode",
        "statusType": "msg",
        "x": 1115,
        "y": 260,
        "wires": [],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "62e2db5dec5eeda8",
        "type": "function",
        "z": "bb119fa58e5b3485",
        "g": "fd02e1eb88ae35ab",
        "name": "Check MediaType",
        "func": "// Define supported media types for images and videos\nconst supportedMediaTypes = {\n  image: [\"image/jpeg\", \"image/png\", \"image/webp\", \"image/heic\", \"image/heif\"],\n  video: [\"video/mp4\", \"video/mpeg\", \"video/mov\", \"video/avi\", \"video/x-flv\", \"video/mpg\", \"video/webm\", \"video/wmx\", \"video/3gpp\"]\n};\n\n// Extract the media type from the incoming message\nconst assetMediaType = msg.mediaType;\n\n// Function to check if the media type is supported\nconst isSupportedMediaType = (type, mediaType) => supportedMediaTypes[type].includes(mediaType);\n\ntry {\n  // Validate the media type\n  if (!isSupportedMediaType('image', assetMediaType) && !isSupportedMediaType('video', assetMediaType)) {\n    // If unsupported, set the error message and supported media types\n    msg.statusInfo = `The selected asset has a media type of \"${assetMediaType}\", which is not among the supported media types. Please choose a compatible media type.`;\n    msg.supportedMediaTypes = supportedMediaTypes;\n    msg.statusCode = 400; // Set status code for unsupported media type\n    return [null, msg]; // Send to output 2\n  } else {\n    // If supported, set a success message\n    msg.statusInfo = `The selected asset has a supported media type: \"${assetMediaType}\".`;\n    msg.statusCode = 200; // Set status code for supported media type\n    return [msg, null]; // Send to output 1\n  }\n} catch (error) {\n  // Handle unexpected errors\n  node.error(\"An error occurred while checking the media type\", msg);\n  msg.statusInfo = \"An internal error occurred.\";\n  msg.statusCode = 500; // Set status code for internal error\n  return [null, msg]; // Send to output 2\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1455,
        "y": 200,
        "wires": [
            [
                "016fac0e773e7897",
                "1af3f73061416777"
            ],
            [
                "c6921afbb473bc70"
            ]
        ],
        "l": false,
        "info": "# Check MediaType\n\n## Purpose\nThis function node checks if the provided media type is supported for processing. It categorizes media types into `image` and `video` and validates the input against predefined lists of supported types.\n\n## Input\n- `msg.mediaType`: A string representing the media type of the asset (e.g., `image/jpeg`, `video/mp4`).\n\n## Output\n- **Output 1**: For supported media types.\n  - `msg.payload`: A success message indicating the media type is supported.\n  - `msg.statusCode`: `200` (HTTP status code for success).\n- **Output 2**: For unsupported media types or errors.\n  - `msg.payload`: An error message indicating the media type is unsupported or an internal error occurred.\n  - `msg.supportedMediaTypes`: An object listing all supported media types.\n  - `msg.statusCode`: `400` for unsupported media types, `500` for internal errors.\n\n## Logic\n1. Define supported media types for `image` and `video` categories.\n2. Extract the `mediaType` from the incoming `msg` object.\n3. Check if the `mediaType` exists in either the `image` or `video` list.\n4. If unsupported:\n   - Set an error message and include the list of supported media types.\n   - Set `msg.statusCode` to `400` and send the message to **Output 2**.\n5. If supported:\n   - Set a success message.\n   - Set `msg.statusCode` to `200` and send the message to **Output 1**.\n6. Handle unexpected errors by setting an internal error message and `msg.statusCode` to `500`.\n\n## Notes\n> Ensure the `msg.mediaType` field is provided in the input message. If missing, the function will treat it as unsupported.\n\n## Author\n[Created by francois.brisson@qibb.com](mailto:francois.brisson@qibb.com)\n\n## qibb Docs\n[📚 qibb Platform Documentation](https://docs.qibb.com/platform/latest/)"
    },
    {
        "id": "c6921afbb473bc70",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "g": "fd02e1eb88ae35ab",
        "name": "Debug Error: Check MediaType",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 1455,
        "y": 260,
        "wires": [],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "016fac0e773e7897",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "g": "fd02e1eb88ae35ab",
        "name": "Debug OK: Check MediaType",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 1455,
        "y": 140,
        "wires": [],
        "icon": "font-awesome/fa-check-circle-o",
        "l": false
    },
    {
        "id": "2bf0e9042e6659c6",
        "type": "comment",
        "z": "bb119fa58e5b3485",
        "g": "918806d2d79fe6e6",
        "name": "[3] 📖 Doc - Iconik Get Format",
        "info": "",
        "x": 1140,
        "y": 80,
        "wires": [],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "8e41cb773d695eb6",
        "type": "comment",
        "z": "bb119fa58e5b3485",
        "g": "fd02e1eb88ae35ab",
        "name": "[4] 📖 Doc - Check MediaType",
        "info": "",
        "x": 1460,
        "y": 80,
        "wires": [],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "1af3f73061416777",
        "type": "change",
        "z": "bb119fa58e5b3485",
        "g": "fd02e1eb88ae35ab",
        "name": "Save Media type",
        "rules": [
            {
                "t": "delete",
                "p": "statusCode",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "statusInfo",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1555,
        "y": 200,
        "wires": [
            [
                "378749f3f7f8db51"
            ]
        ],
        "l": false
    },
    {
        "id": "378749f3f7f8db51",
        "type": "iconik-files-client",
        "z": "bb119fa58e5b3485",
        "g": "55b3c47cc59469f5",
        "name": "GET /v1/assets/{asset_id}/proxies/",
        "selectedOperation": {
            "method": "get",
            "path": "/v1/assets/{asset_id}/proxies/",
            "summary": "Get all asset's proxies",
            "description": "Get all asset's proxies\n\nRequired roles:\n - can_read_proxies\n",
            "tag": "Other",
            "operationId": "get_v1_assets__asset_id__proxies_"
        },
        "api": "api-0",
        "errorHandlingModeSelectedIndex": 1,
        "security": [],
        "requestContentTypeSelectedIndex": 0,
        "responseContentTypeSelectedIndex": 0,
        "parameters": [
            {
                "name": "asset_id",
                "value": "asset_id",
                "in": "path",
                "refType": "msg"
            },
            {
                "name": "per_page",
                "value": "",
                "in": "query",
                "refType": "type"
            },
            {
                "name": "generate_signed_url",
                "value": "true",
                "in": "query",
                "refType": "type"
            },
            {
                "name": "content_disposition",
                "value": "attachment",
                "in": "query",
                "refType": "type"
            },
            {
                "name": "last_id",
                "value": "",
                "in": "query",
                "refType": "type"
            }
        ],
        "uiFeatures": {
            "operations": {
                "advancedMode": true
            }
        },
        "outputs": 2,
        "output": "iconik.output",
        "host": {
            "type": "string",
            "value": "",
            "refType": "type"
        },
        "x": 1695,
        "y": 200,
        "wires": [
            [
                "7e2eb0fab7bc6a69",
                "8278629e61d3b099"
            ],
            [
                "c8e84af63e546d14"
            ]
        ],
        "l": false
    },
    {
        "id": "7e2eb0fab7bc6a69",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "g": "55b3c47cc59469f5",
        "name": "Debug OK: Get Proxies",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "iconik.output.statusCode",
        "statusType": "msg",
        "x": 1695,
        "y": 140,
        "wires": [],
        "icon": "font-awesome/fa-check-circle-o",
        "l": false
    },
    {
        "id": "c8e84af63e546d14",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "g": "55b3c47cc59469f5",
        "name": "Debug Error: Get Proxies",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "iconik.output.statusCode",
        "statusType": "msg",
        "x": 1695,
        "y": 260,
        "wires": [],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "8278629e61d3b099",
        "type": "change",
        "z": "bb119fa58e5b3485",
        "g": "55b3c47cc59469f5",
        "name": "Save Proxy Url",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "iconik.output.responseUrl",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "assetName",
                "pt": "msg",
                "to": "iconik.output.payload.objects[0].name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "iconik.get_proxies",
                "pt": "msg",
                "to": "iconik.output",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "headers",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1775,
        "y": 200,
        "wires": [
            [
                "60f01beb32c02861"
            ]
        ],
        "l": false
    },
    {
        "id": "60f01beb32c02861",
        "type": "switch",
        "z": "bb119fa58e5b3485",
        "g": "1eba5f0f11ebce0e",
        "name": "Image or Video?",
        "property": "mediaType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "image",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "video",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 575,
        "y": 500,
        "wires": [
            [
                "1912e80aa826d7f5"
            ],
            [
                "c17bc71b9a4caec4",
                "1a313660c43ee208"
            ]
        ],
        "l": false
    },
    {
        "id": "1912e80aa826d7f5",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "g": "1eba5f0f11ebce0e",
        "name": "Debug OK: Iconik Image",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "mediaType",
        "statusType": "msg",
        "x": 575,
        "y": 440,
        "wires": [],
        "icon": "font-awesome/fa-check-circle-o",
        "l": false
    },
    {
        "id": "c17bc71b9a4caec4",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "g": "1eba5f0f11ebce0e",
        "name": "Debug OK: Iconik Video",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "mediaType",
        "statusType": "msg",
        "x": 575,
        "y": 560,
        "wires": [],
        "icon": "font-awesome/fa-check-circle-o",
        "l": false
    },
    {
        "id": "f4d3219677e48ac3",
        "type": "comment",
        "z": "bb119fa58e5b3485",
        "g": "55b3c47cc59469f5",
        "name": "[5] 📖 Doc - Get Proxies",
        "info": "",
        "x": 1760,
        "y": 80,
        "wires": [],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "c7bd865a40778920",
        "type": "comment",
        "z": "bb119fa58e5b3485",
        "g": "1eba5f0f11ebce0e",
        "name": "[6] 📖 Doc - Mediatype",
        "info": "",
        "x": 560,
        "y": 400,
        "wires": [],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "e3df322b4395c4b8",
        "type": "file",
        "z": "bb119fa58e5b3485",
        "g": "5f2970019d9fe440",
        "name": "Write File",
        "filename": "/tmp/temp_video.mp4",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "binary",
        "x": 875,
        "y": 520,
        "wires": [
            [
                "7b587903328434c4"
            ]
        ],
        "l": false
    },
    {
        "id": "593245d270ac9b82",
        "type": "http request",
        "z": "bb119fa58e5b3485",
        "g": "5f2970019d9fe440",
        "name": "Download Proxy",
        "method": "GET",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 815,
        "y": 520,
        "wires": [
            [
                "e3df322b4395c4b8",
                "a2ea3d519a01e1a1"
            ]
        ],
        "l": false
    },
    {
        "id": "7b587903328434c4",
        "type": "file in",
        "z": "bb119fa58e5b3485",
        "g": "5f2970019d9fe440",
        "name": "Read File ",
        "filename": "/tmp/temp_video.mp4",
        "filenameType": "str",
        "format": "stream",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 935,
        "y": 520,
        "wires": [
            [
                "8b15a63895cb51a3",
                "9f0e4b157f97680a"
            ]
        ],
        "l": false
    },
    {
        "id": "a2ea3d519a01e1a1",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "g": "5f2970019d9fe440",
        "name": "Debug OK: Fetch Proxies",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 815,
        "y": 460,
        "wires": [],
        "icon": "font-awesome/fa-check-circle-o",
        "l": false
    },
    {
        "id": "1a313660c43ee208",
        "type": "change",
        "z": "bb119fa58e5b3485",
        "g": "5f2970019d9fe440",
        "name": "Save Auth Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "authHeaders",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 755,
        "y": 520,
        "wires": [
            [
                "593245d270ac9b82"
            ]
        ],
        "l": false
    },
    {
        "id": "8b15a63895cb51a3",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "g": "5f2970019d9fe440",
        "name": "Debug OK: Write File",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "assetName",
        "statusType": "msg",
        "x": 935,
        "y": 460,
        "wires": [],
        "icon": "font-awesome/fa-check-circle-o",
        "l": false
    },
    {
        "id": "aba3f61d19b83110",
        "type": "function",
        "z": "bb119fa58e5b3485",
        "g": "7b9495278bbc1acd",
        "name": "Upload File to FileAPI(Google)",
        "func": "const { GoogleAIFileManager } = googleGenerativeAiServer;\n\nconst fileManager = new GoogleAIFileManager(msg.apiKey);\n\ntry {\n    const uploadResponse = await fileManager.uploadFile(msg.filename, {\n        mimeType: \"video/mp4\",\n        displayName: msg.filename\n    });\n\n    msg.payload = {\n        statusCode: 200,\n        statusInfo: \"File uploaded successfully\",\n        uploadResponse: uploadResponse\n    };\n\n    return [msg, null]; // Output 1: success\n} catch (error) {\n    node.error(\"File upload failed\", error);\n\n    msg.payload = {\n        statusCode: 500,\n        statusInfo: \"File upload failed\",\n        error: error.message\n    };\n\n    return [null, msg]; // Output 2: failure\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "googleGenerativeAiServer",
                "module": "@google/generative-ai/server"
            },
            {
                "var": "googleGenerativeAi",
                "module": "@google/generative-ai"
            }
        ],
        "x": 1135,
        "y": 500,
        "wires": [
            [
                "5eedb1308b3932a6",
                "20107de6bd37a1b5"
            ],
            [
                "43b5ac776f95284a"
            ]
        ],
        "l": false,
        "info": "# Google AI File Upload\n\n## Purpose\nThis function node uploads a file to Google AI services using the `GoogleAIFileManager` class. It allows specifying the file's MIME type and display name during the upload process.\n\n## Input\n- `msg.apiKey`: The API key for authenticating with Google AI services.\n- `msg.filename`: The name of the file to be uploaded.\n\n## Output\n- `msg.payload`: Contains the response from the file upload operation.\n  - On success: The upload response from Google AI.\n  - On failure: An error object with details about the failure.\n\n## Logic\n1. Import the `GoogleAIFileManager` class from `googleGenerativeAiServer`.\n2. Initialize the file manager with the provided API key (`msg.apiKey`).\n3. Use the `uploadFile` method to upload the file:\n   - Specify the MIME type as `video/mp4`.\n   - Use the filename (`msg.filename`) as the display name.\n4. If the upload is successful:\n   - Set the upload response as `msg.payload`.\n   - Return the updated `msg` object.\n5. If an error occurs:\n   - Log the error using `node.error`.\n   - Set an error object in `msg.payload` with details about the failure.\n   - Return the updated `msg` object.\n\n## Notes\n> Ensure that the `msg.apiKey` and `msg.filename` fields are provided in the input message. Missing fields will result in an error.\n\n## Author\n[Created by francois.brisson@qibb.com](mailto:francois.brisson@qibb.com)\n\n## qibb Docs\n[📚 qibb Platform Documentation](https://docs.qibb.com/platform/latest/)"
    },
    {
        "id": "5eedb1308b3932a6",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "g": "7b9495278bbc1acd",
        "name": "Debug OK: Upload File",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload.statusCode",
        "statusType": "msg",
        "x": 1135,
        "y": 440,
        "wires": [],
        "icon": "font-awesome/fa-check-circle-o",
        "l": false
    },
    {
        "id": "9f0e4b157f97680a",
        "type": "change",
        "z": "bb119fa58e5b3485",
        "g": "7b9495278bbc1acd",
        "name": "Set Gemini Paramaters ",
        "rules": [
            {
                "t": "set",
                "p": "apiKey",
                "pt": "msg",
                "to": "SECRETS.GEMINI_API_KEY",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1075,
        "y": 500,
        "wires": [
            [
                "aba3f61d19b83110"
            ]
        ],
        "l": false
    },
    {
        "id": "321a1621e0a7aed1",
        "type": "comment",
        "z": "bb119fa58e5b3485",
        "g": "5f2970019d9fe440",
        "name": "[7] 📖 Doc - Download Proxy",
        "info": "",
        "x": 860,
        "y": 400,
        "wires": [],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "43b5ac776f95284a",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "g": "7b9495278bbc1acd",
        "name": "Debug Error: Upload File",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload.statusCode",
        "statusType": "msg",
        "x": 1135,
        "y": 560,
        "wires": [],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "20107de6bd37a1b5",
        "type": "change",
        "z": "bb119fa58e5b3485",
        "g": "7b9495278bbc1acd",
        "name": "Save File Response and Clean Payload",
        "rules": [
            {
                "t": "set",
                "p": "uploadResponse.fileName",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "fileUri",
                "pt": "msg",
                "to": "payload.uploadResponse.file.uri",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "statusCode",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1235,
        "y": 500,
        "wires": [
            [
                "16a44ea1c96c8bf4",
                "f1b6a7dfc122ec1d"
            ]
        ],
        "l": false
    },
    {
        "id": "fba603dcc61e0e8c",
        "type": "subflow:fec23f0ed22e717d",
        "z": "bb119fa58e5b3485",
        "g": "2b021cccaf858ffb",
        "name": "",
        "env": [
            {
                "name": "SUMMARY",
                "type": "bool",
                "value": "true"
            },
            {
                "name": "CAPTIONING",
                "type": "bool",
                "value": "true"
            },
            {
                "name": "MODEL",
                "value": "gemini-1.5-pro",
                "type": "str"
            }
        ],
        "x": 660,
        "y": 1920,
        "wires": [
            [
                "e77a15478f3fd4a8"
            ],
            [
                "4e556b99f052016d"
            ]
        ]
    },
    {
        "id": "e77a15478f3fd4a8",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "g": "2b021cccaf858ffb",
        "name": "Text Generated",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 815,
        "y": 1780,
        "wires": [],
        "icon": "font-awesome/fa-exclamation-circle",
        "l": false
    },
    {
        "id": "4e556b99f052016d",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "g": "2b021cccaf858ffb",
        "name": "Gemini Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 805,
        "y": 1940,
        "wires": [],
        "icon": "font-awesome/fa-warning",
        "l": false
    },
    {
        "id": "c6316525076d23bd",
        "type": "comment",
        "z": "bb119fa58e5b3485",
        "g": "7b9495278bbc1acd",
        "name": "[8] 📖 Doc - Upload File",
        "info": "",
        "x": 1160,
        "y": 400,
        "wires": [],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "34b7d8445af983fd",
        "type": "change",
        "z": "bb119fa58e5b3485",
        "name": "Save Response",
        "rules": [
            {
                "t": "set",
                "p": "responseText.content",
                "pt": "msg",
                "to": "payload.candidates[0].content.parts[0].text",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "responseText.safetyRatings",
                "pt": "msg",
                "to": "payload.candidates[0].safetyRatings",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "responseUrl",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "userPrompt",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "url",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "apiKey",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "uploadResponse",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "mediaType",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "filename",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "model",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "mediaType",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "displayName",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "noResultsFormat",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "formats",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "statusCode",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "headers",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "fileUri",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "uploadFileName",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "retry",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "redirectList",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1560,
        "y": 1440,
        "wires": [
            [
                "4c5fb01131766919"
            ]
        ]
    },
    {
        "id": "04012d78b815481e",
        "type": "function",
        "z": "bb119fa58e5b3485",
        "name": "Check Selected Option",
        "func": "const highlights = env.get(\"HIGHLIGHTS\"); \nconst keywords = env.get(\"KEYWORDS\");\nconst summary = env.get(\"SUMMARY\");\nconst captioning = env.get(\"CAPTIONING\");\nconst actionRecognition = env.get(\"ACTION_RECOGNITION\")\nconst selectedOptions = [];\n\nmsg.model = global.get(\"SECRETS.GEMINI_MODEL\")\n\n// Determine the selected options\nif (highlights) {\n  selectedOptions.push(\"Highlights\");\n}\nif (keywords) {\n  selectedOptions.push(\"Keywords\");\n}\nif (summary) {\n  selectedOptions.push(\"Summary\");\n}\nif(captioning){\n  selectedOptions.push(\"Video Captioning\");\n}\nif(actionRecognition){\n  selectedOptions.push(\"Video Action Recognition\");\n}\n\nmsg.selectedOptions = selectedOptions\n\n// Validate that at least one option is selected\nif (!highlights && !keywords && !summary) {\n  const errorMsg = \"You must select at least one option\";\n  node.error(errorMsg);\n  node.status({ fill: \"red\", shape: \"ring\", text: errorMsg });\n  setTimeout(() => node.status({}), 2000);\n  return [null, msg];\n}\n\n// Validate the model presence\nif (!msg.model) {\n  const errorMsg = \"You must provide a Gemini Model\";\n  node.error(errorMsg);\n  node.status({ fill: \"red\", shape: \"ring\", text: errorMsg });\n  \n  setTimeout(() => node.status({}), 2000);\n  return [null, msg];\n}\n\nreturn [msg, null];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1500,
        "wires": [
            [
                "ed4e8db8c18ea28d"
            ],
            [
                "16148f21184c4cb9"
            ]
        ]
    },
    {
        "id": "9b217d271f42e5b2",
        "type": "template",
        "z": "bb119fa58e5b3485",
        "name": "Set Payload",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "mustache",
        "template": "{\n    \"contents\": [\n        {\n            \"parts\": [\n                {\n                    \"fileData\": {\n                        \"mimeType\": \"{{{mediaType}}}\",\n                        \"fileUri\": \"{{{fileUri}}}\"\n                    }\n                }\n            ],\n            \"role\": \"user\"\n        },\n        {\n            \"parts\": [\n                {\n                    \"text\": \"{{{userPrompt}}}\"\n                }\n            ],\n            \"role\": \"user\"\n        }\n    ]\n}",
        "output": "json",
        "x": 850,
        "y": 1480,
        "wires": [
            [
                "32855f76244618c9"
            ]
        ]
    },
    {
        "id": "16148f21184c4cb9",
        "type": "function",
        "z": "bb119fa58e5b3485",
        "name": "Set Error Response",
        "func": "const errorMsg = \"Gemini Error\"\nnode.status({fill:\"red\",shape:\"ring\",text:errorMsg});\nsetTimeout(() => {\n  node.status({});\n}, 2000);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "17befd5a4b7f684f",
        "type": "function",
        "z": "bb119fa58e5b3485",
        "name": "Set Success Response",
        "func": "node.status({fill:\"green\",shape:\"ring\",text:\"Success\"});\nsetTimeout(() => {\n  node.status({});\n}, 2000);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 1440,
        "wires": [
            [
                "34b7d8445af983fd"
            ]
        ]
    },
    {
        "id": "ed4e8db8c18ea28d",
        "type": "function",
        "z": "bb119fa58e5b3485",
        "name": "Set Formats ",
        "func": "const selectedOptions = msg.selectedOptions;\nconst outputFormats = {};\n\n// Check for Object Detection\nif (selectedOptions.includes(\"Highlights\")) {\n  const highlightsFormat = [\n    {\n      \"highlight\": \"[Brief description of the important moments]\",\n      \"timestamp\": \"[Timestamp for the start and end time of the highlight in the format HH:MM:SS]\",\n      \"duration\": \"Duration of the highlight in the video\"\n    }\n  ];\n  outputFormats.highlights = highlightsFormat;\n}\n\n// Check for Optical Character Recognition (OCR)\nif (selectedOptions.includes(\"Summary\")) {\n  const summaryFormat = \"Provide a detailed summary of the key events, scenes, and main content of the video\";\n  outputFormats.summary = summaryFormat;\n}\n\n// Check for Description\nif (selectedOptions.includes(\"Keywords\")) {\n  const keywordsFormat = [\n  \"Generate a list of most relevant keywords or topics related to the video content\"\n  ];\n  outputFormats.keywords = keywordsFormat;\n}\n\n// Check for Video Captioning \nif (selectedOptions.includes(\"Video Captioning\")){\n  const videoCaptioningFormat = [\n    {\n      \"timestamp\": \"[Time in the video, e.g., '00:01:23']\",\n      \"sceneDescription\": {\n        \"overall\": \"[Description of the environment, e.g., 'A sunny park with children playing in the background']\",\n        \"objects\": [\n          {\n            \"objectName\": \"[Name of detected object, e.g., 'dog', 'tree']\",\n            \"position\": \"[Position of the object in the frame, e.g., 'center', 'top-left']\"\n          }\n        ]\n      }\n    }\n  ]\n  outputFormats.videoCaptioning = videoCaptioningFormat\n}\n\n// Check for Video Action Recognition \nif (selectedOptions.includes(\"Video Action Recognition\")){\n  const actionRecognitionFormat = [\n    {\n      \"timestamp\": \"[Time in the video, e.g., '00:02:05']\",\n      \"action\": \"[Detected action, e.g., 'running', 'jumping', etc...]\",\n      \"subject\": \"[Who is performing the action, e.g., 'man', 'child']\",\n      \"duration\": \"[Duration of the action in seconds, e.g., '3.5 seconds']\",\n      \"objectInteraction\": \"[Object being interacted with, if any, e.g., 'holding a tennis racket']\"\n    }\n  ]\n  outputFormats.actionRecognition = actionRecognitionFormat\n}\n\n// No Results Format\nconst noResultsFormat = [\n  {\n    \"option\": \"[Selected option]\",\n    \"message\": \"No descriptive content could be generated for this image.\"\n  }\n];\n\nmsg.noResultsFormat = JSON.stringify(noResultsFormat, null, 2);\nconst formattedOutput = JSON.stringify(outputFormats, null, 2);\n\nmsg.formats = formattedOutput;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1480,
        "wires": [
            [
                "e4cfda2ae41f5038"
            ]
        ]
    },
    {
        "id": "32855f76244618c9",
        "type": "change",
        "z": "bb119fa58e5b3485",
        "name": "Set Url",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "https://generativelanguage.googleapis.com/v1beta/models/\" & model & \":generateContent",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "authHeaders",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "statusCode",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 1480,
        "wires": [
            [
                "d5b4a87a6cefb6c9"
            ]
        ]
    },
    {
        "id": "4c5fb01131766919",
        "type": "json",
        "z": "bb119fa58e5b3485",
        "name": "",
        "property": "responseText.content",
        "action": "",
        "pretty": false,
        "x": 1730,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "d5b4a87a6cefb6c9",
        "type": "subflow:0876dbcda80b1dec",
        "z": "bb119fa58e5b3485",
        "name": "",
        "x": 1160,
        "y": 1480,
        "wires": [
            [
                "17befd5a4b7f684f"
            ],
            [
                "16148f21184c4cb9"
            ]
        ]
    },
    {
        "id": "056246df9904ea45",
        "type": "function",
        "z": "bb119fa58e5b3485",
        "name": "Check Selected Option",
        "func": "// Hardcoded test values (override env and global context)\nconst highlights = true;\nconst keywords = false;\nconst summary = true;\nconst captioning = true;\nconst actionRecognition = false;\n\nconst selectedOptions = [];\n\n// Hardcoded model for testing\nmsg.model = \"models/gemini-pro-vision\"; // replace with your actual model ID if needed\n\n// Determine the selected options\nif (highlights) {\n    selectedOptions.push(\"Highlights\");\n}\nif (keywords) {\n    selectedOptions.push(\"Keywords\");\n}\nif (summary) {\n    selectedOptions.push(\"Summary\");\n}\nif (captioning) {\n    selectedOptions.push(\"Video Captioning\");\n}\nif (actionRecognition) {\n    selectedOptions.push(\"Video Action Recognition\");\n}\n\nmsg.selectedOptions = selectedOptions;\n\n// Validate that at least one option is selected\nif (!highlights && !keywords && !summary && !captioning && !actionRecognition) {\n    const errorMsg = \"You must select at least one option\";\n    node.error(errorMsg);\n    node.status({ fill: \"red\", shape: \"ring\", text: errorMsg });\n    setTimeout(() => node.status({}), 2000);\n    return [null, msg];\n}\n\n// Validate the model presence\nif (!msg.model) {\n    const errorMsg = \"You must provide a Gemini Model\";\n    node.error(errorMsg);\n    node.status({ fill: \"red\", shape: \"ring\", text: errorMsg });\n    setTimeout(() => node.status({}), 2000);\n    return [null, msg];\n}\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 575,
        "y": 900,
        "wires": [
            [
                "c6480ce55b348f13",
                "aa06e61eb146281c"
            ],
            [
                "7d223f269faec961"
            ]
        ],
        "l": false,
        "info": "# Check Selected Option\n\n## Purpose\nThis function node validates the selected options and ensures that at least one option is chosen. It also checks for the presence of a Gemini model ID.\n\n## Input\n- No specific input fields are required, but the following are hardcoded for testing:\n  - `highlights`: Boolean indicating if the Highlights option is selected.\n  - `keywords`: Boolean indicating if the Keywords option is selected.\n  - `summary`: Boolean indicating if the Summary option is selected.\n  - `captioning`: Boolean indicating if the Video Captioning option is selected.\n  - `actionRecognition`: Boolean indicating if the Video Action Recognition option is selected.\n  - `msg.model`: The Gemini model ID (hardcoded as `models/gemini-pro-vision` for testing).\n\n## Output\n- **Output 1**: For valid selections.\n  - `msg.selectedOptions`: An array of selected options (e.g., `['Highlights', 'Summary']`).\n  - `msg.model`: The Gemini model ID.\n- **Output 2**: For errors or invalid selections.\n  - `msg.payload`: Contains the error message.\n\n## Logic\n1. Define hardcoded test values for the options (`highlights`, `keywords`, `summary`, `captioning`, `actionRecognition`).\n2. Initialize an empty array `selectedOptions` to store the selected options.\n3. Check each option and add it to `selectedOptions` if selected.\n4. Validate that at least one option is selected:\n   - If none are selected, log an error, update the node status, and send the message to **Output 2**.\n5. Validate the presence of `msg.model`:\n   - If missing, log an error, update the node status, and send the message to **Output 2**.\n6. If all validations pass, send the message to **Output 1**.\n\n## Notes\n> Replace the hardcoded values with dynamic inputs as needed for production use.\n\n## Author\n[Created by francois.brisson@qibb.com](mailto:francois.brisson@qibb.com)\n\n## qibb Docs\n[📚 qibb Platform Documentation](https://docs.qibb.com/platform/latest/)"
    },
    {
        "id": "aa06e61eb146281c",
        "type": "template",
        "z": "bb119fa58e5b3485",
        "name": "Prompt Formats (Template)",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "plain",
        "template": "{\n  \"formats\": {\n    \"Highlights\": [\n      {\n        \"highlight\": \"[Brief description of the important moments]\",\n        \"timestamp\": \"[Timestamp for the start and end time of the highlight in the format HH:MM:SS]\",\n        \"duration\": \"Duration of the highlight in the video\"\n      }\n    ],\n    \"Summary\": \"Provide a detailed summary of the key events, scenes, and main content of the video\",\n    \"Keywords\": [\n      \"Generate a list of most relevant keywords or topics related to the video content\"\n    ],\n    \"Video Captioning\": [\n      {\n        \"timestamp\": \"[Time in the video, e.g., '00:01:23']\",\n        \"sceneDescription\": {\n          \"overall\": \"[Description of the environment, e.g., 'A sunny park with children playing in the background']\",\n          \"objects\": [\n            {\n              \"objectName\": \"[Name of detected object, e.g., 'dog', 'tree']\",\n              \"position\": \"[Position of the object in the frame, e.g., 'center', 'top-left']\"\n            }\n          ]\n        }\n      }\n    ],\n    \"Video Action Recognition\": [\n      {\n        \"timestamp\": \"[Time in the video, e.g., '00:02:05']\",\n        \"action\": \"[Detected action, e.g., 'running', 'jumping', etc...]\",\n        \"subject\": \"[Who is performing the action, e.g., 'man', 'child']\",\n        \"duration\": \"[Duration of the action in seconds, e.g., '3.5 seconds']\",\n        \"objectInteraction\": \"[Object being interacted with, if any, e.g., 'holding a tennis racket']\"\n      }\n    ]\n  },\n  \"noResultsFormat\": [\n    {\n      \"option\": \"[Selected option]\",\n      \"message\": \"No descriptive content could be generated for this image.\"\n    }\n  ]\n}",
        "output": "json",
        "x": 755,
        "y": 900,
        "wires": [
            [
                "8f14f2d0ab60c0d3"
            ]
        ],
        "l": false
    },
    {
        "id": "8f14f2d0ab60c0d3",
        "type": "function",
        "z": "bb119fa58e5b3485",
        "name": "Set Formats (from Template)",
        "func": "const selectedOptions = msg.selectedOptions;\nconst allFormats = msg.payload.formats || {};\nconst outputFormats = {};\n\n// Build output based on selected options\nfor (const option of selectedOptions) {\n    if (allFormats[option]) {\n        const key = option.toLowerCase().replace(/ /g, \"\");\n        outputFormats[key] = allFormats[option];\n    }\n}\n\n// Always add noResultsFormat\nmsg.noResultsFormat = JSON.stringify(msg.payload.noResultsFormat || [], null, 2);\nmsg.formats = JSON.stringify(outputFormats, null, 2);\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 815,
        "y": 900,
        "wires": [
            [
                "26b4a64ae183c139"
            ]
        ],
        "l": false
    },
    {
        "id": "c6480ce55b348f13",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "name": "Debug OK: Check Selected Option",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "selectedOptions",
        "statusType": "msg",
        "x": 575,
        "y": 840,
        "wires": [],
        "icon": "font-awesome/fa-check-circle-o",
        "l": false
    },
    {
        "id": "7d223f269faec961",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "name": "Debug Error: Check Selected Option",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "selectedOptions",
        "statusType": "msg",
        "x": 575,
        "y": 960,
        "wires": [],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "0a00ea4d7c10bef4",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 900,
        "wires": []
    },
    {
        "id": "e4cfda2ae41f5038",
        "type": "template",
        "z": "bb119fa58e5b3485",
        "name": "Set Prompt",
        "field": "userPrompt",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Using the provided video and selected options, generate text content that accurately represents the relevant details for each option while adhering to the given formats. \nEnsure that each object is formatted properly and that redundant information is avoided.\nDo not use Markdown formatting in your output.\n\nFor each selected option, use the corresponding format as outlined below:\n-Selected options: {{{selectedOptions}}}\n-Expected format: {{{formats}}}\n\nIf no relevant results are available for any selected option, return the following format: {{noResultsFormat}}, indicating that no relevant data could be generated for the option.",
        "output": "str",
        "x": 690,
        "y": 1480,
        "wires": [
            [
                "9b217d271f42e5b2"
            ]
        ]
    },
    {
        "id": "26b4a64ae183c139",
        "type": "template",
        "z": "bb119fa58e5b3485",
        "name": "Set Prompt",
        "field": "userPrompt",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Using the provided video and selected options, generate text content that accurately represents the relevant details for each option while adhering to the given formats. \nEnsure that each object is formatted properly and that redundant information is avoided.\nDo not use Markdown formatting in your output.\n\nFor each selected option, use the corresponding format as outlined below:\n-Selected options: {{{selectedOptions}}}\n-Expected format: {{{formats}}}\n\nIf no relevant results are available for any selected option, return the following format: {{noResultsFormat}}, indicating that no relevant data could be generated for the option.",
        "output": "str",
        "x": 895,
        "y": 900,
        "wires": [
            [
                "7dea554c6ac7de37",
                "68bcce7fd6fe1421"
            ]
        ],
        "l": false
    },
    {
        "id": "6f1cabb71c4652da",
        "type": "change",
        "z": "bb119fa58e5b3485",
        "name": "Set Url",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "authHeaders",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "statusCode",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1095,
        "y": 900,
        "wires": [
            [
                "41c5a0c10342a1bc"
            ]
        ],
        "l": false
    },
    {
        "id": "7271b87a36384d42",
        "type": "http request",
        "z": "bb119fa58e5b3485",
        "name": "Gemini Request",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "x-goog-api-key",
                "valueType": "msg",
                "valueValue": "apiKey"
            }
        ],
        "x": 1080,
        "y": 1180,
        "wires": [
            [
                "5b5d6bb37b9005f6"
            ]
        ]
    },
    {
        "id": "5b5d6bb37b9005f6",
        "type": "switch",
        "z": "bb119fa58e5b3485",
        "name": "Success?",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1240,
        "y": 1180,
        "wires": [
            [
                "90bae9be7c39ac67"
            ],
            [
                "f514b78ed9cfc713"
            ]
        ]
    },
    {
        "id": "f514b78ed9cfc713",
        "type": "function",
        "z": "bb119fa58e5b3485",
        "name": "Set Error Status",
        "func": "const errorMsg = \"Gemini Error\"\nnode.status({fill:\"red\",shape:\"ring\",text:errorMsg});\nsetTimeout(() => {\n  node.status({});\n}, 2000);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "90bae9be7c39ac67",
        "type": "function",
        "z": "bb119fa58e5b3485",
        "name": "Set Success Status",
        "func": "node.status({fill:\"green\",shape:\"ring\",text:\"Success\"});\nsetTimeout(() => {\n  node.status({});\n}, 2000);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "41c5a0c10342a1bc",
        "type": "http request",
        "z": "bb119fa58e5b3485",
        "name": "Gemini Request",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "x-goog-api-key",
                "valueType": "msg",
                "valueValue": "apiKey"
            }
        ],
        "x": 1240,
        "y": 900,
        "wires": [
            [
                "0a00ea4d7c10bef4"
            ]
        ]
    },
    {
        "id": "922775893b3f9e19",
        "type": "switch",
        "z": "bb119fa58e5b3485",
        "name": "Success?",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1300,
        "y": 980,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "7dea554c6ac7de37",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 895,
        "y": 1040,
        "wires": [],
        "l": false
    },
    {
        "id": "4194d0a647c40273",
        "type": "template",
        "z": "bb119fa58e5b3485",
        "name": "Set Payload",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "mustache",
        "template": "{\n    \"contents\": [\n        {\n            \"parts\": [\n                {\n                    \"fileData\": {\n                        \"mimeType\": \"{{{mediaType}}}\",\n                        \"fileUri\": \"{{{fileUri}}}\"\n                    }\n                }\n            ],\n            \"role\": \"user\"\n        },\n        {\n            \"parts\": [\n                {\n                    \"text\": \"{{{userPrompt}}}\"\n                }\n            ],\n            \"role\": \"user\"\n        }\n    ]\n}",
        "output": "json",
        "x": 1045,
        "y": 1000,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "68bcce7fd6fe1421",
        "type": "function",
        "z": "bb119fa58e5b3485",
        "name": "function 1",
        "func": "msg.payload = {\n  contents: [\n    {\n      parts: [{\n        fileData: {\n          mimeType: msg.mediaType,\n          fileUri:  msg.fileUri\n        }\n      }],\n      role: \"user\"\n    },\n    {\n      parts: [{ text: msg.userPrompt }],\n      role: \"user\"\n    }\n  ]\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 975,
        "y": 900,
        "wires": [
            [
                "6f1cabb71c4652da"
            ]
        ],
        "l": false
    },
    {
        "id": "c070f7d9b66e90ea",
        "type": "change",
        "z": "bb119fa58e5b3485",
        "name": "Set Url",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "https://generativelanguage.googleapis.com/v1beta/models/\" & model & \":generateContent",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "authHeaders",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "statusCode",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1105,
        "y": 960,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "16a44ea1c96c8bf4",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 500,
        "wires": []
    },
    {
        "id": "f1b6a7dfc122ec1d",
        "type": "function",
        "z": "bb119fa58e5b3485",
        "name": "Init Gemini file poll",
        "func": "// locate the resource name, e.g. \"files/89ui0j8x6ybo\"\nconst fileName = msg.uploadResponse?.fileName?.uploadResponse?.file?.name ||\n                 msg.payload?.uploadResponse?.file?.name ||\n                 msg.fileName || \"\";\nif (!fileName) {\n    node.error(\"file.name not found in message\", msg);\n    return null;\n}\nmsg.fileName = fileName;\nmsg.url = `https://generativelanguage.googleapis.com/v1beta/${fileName}`;\nmsg.attempt = 0;           // reset counter\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 680,
        "wires": [
            [
                "5f3f4e8d583182d0",
                "474074ae169349ec"
            ]
        ]
    },
    {
        "id": "5f3f4e8d583182d0",
        "type": "http request",
        "z": "bb119fa58e5b3485",
        "name": "Get file state",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "x-goog-api-key",
                "valueType": "msg",
                "valueValue": "apiKey"
            }
        ],
        "x": 1470,
        "y": 680,
        "wires": [
            [
                "8d1a55d90ddc1d41",
                "56a46021eca67fe3"
            ]
        ]
    },
    {
        "id": "8d1a55d90ddc1d41",
        "type": "switch",
        "z": "bb119fa58e5b3485",
        "name": "State ACTIVE?",
        "property": "payload.file.state",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ACTIVE",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1660,
        "y": 680,
        "wires": [
            [
                "9d519008cd96668f"
            ],
            [
                "4e23486c3eeb2ae0",
                "47b31ff5d40d68d0"
            ]
        ]
    },
    {
        "id": "4e23486c3eeb2ae0",
        "type": "function",
        "z": "bb119fa58e5b3485",
        "name": "++attempt",
        "func": "msg.attempt = (msg.attempt || 0) + 1;\nreturn msg;",
        "outputs": 1,
        "x": 1850,
        "y": 680,
        "wires": [
            [
                "340f70f7d4e36db0"
            ]
        ]
    },
    {
        "id": "340f70f7d4e36db0",
        "type": "switch",
        "z": "bb119fa58e5b3485",
        "name": "max 30 tries?",
        "property": "attempt",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "30",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2030,
        "y": 680,
        "wires": [
            [
                "bcd28e87e37b32b0"
            ]
        ]
    },
    {
        "id": "474074ae169349ec",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 740,
        "wires": []
    },
    {
        "id": "bcd28e87e37b32b0",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "name": "Not Ready",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 740,
        "wires": []
    },
    {
        "id": "9d519008cd96668f",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "name": "Ready",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1850,
        "y": 620,
        "wires": []
    },
    {
        "id": "56a46021eca67fe3",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1640,
        "y": 740,
        "wires": []
    },
    {
        "id": "47b31ff5d40d68d0",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1820,
        "y": 740,
        "wires": []
    }
]