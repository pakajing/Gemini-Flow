[
    {
        "id": "3887a97abab1ae29",
        "type": "tab",
        "label": "Secret Manager",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bb119fa58e5b3485",
        "type": "tab",
        "label": "Iconik to Gemini",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "97b77bc4b98052be",
        "type": "subflow",
        "name": "Get Global Secret",
        "info": "# Flow Get Secrets\r\n\r\n## Description\r\nThis flow retrieves secrets related to Confluence and Pinecone (email, token, URL, and API key) from the global context (`global.get`) and validates their presence. If any secret is missing, an error is returned with a descriptive message.\r\n\r\n## Input\r\n- **Trigger:**\r\n  - No specific input is required. The function node retrieves secrets from the global context.\r\n- **Context / Global Vars:**\r\n  - `SECRETS.confluence_email`\r\n  - `SECRETS.confluence_token`\r\n  - `SECRETS.confluence_url`\r\n  - `SECRETS.pinecone_ApiKey`\r\n- **Expected Secrets:**\r\n  - `confluence_email`: The email address for Confluence authentication.\r\n  - `confluence_token`: The API token for Confluence authentication.\r\n  - `confluence_url`: The base URL for the Confluence API.\r\n  - `pinecone_ApiKey`: The API key for Pinecone services.\r\n\r\n## Output\r\n- **Success Path:**\r\n  - If all secrets are present:\r\n    - `msg.secret` contains the retrieved secrets as an object:\r\n      ```json\r\n      {\r\n        \"confluence_email\": \"...\",\r\n        \"confluence_token\": \"...\",\r\n        \"confluence_url\": \"...\",\r\n        \"pinecone_apiKey\": \"...\"\r\n      }\r\n      ```\r\n    - `msg.statusCode` is set to `200`.\r\n    - The message is sent to Output 1.\r\n- **Error Path:**\r\n  - If any secret is missing:\r\n    - `msg.error` contains a descriptive error message (e.g., `Global.SECRETS.confluence_email is not set. Please Check Space SECRET`).\r\n    - `msg.statusCode` is set to `404`.\r\n    - The message is sent to Output 2.\r\n\r\n## Notes\r\n> - Ensure that the required secrets are properly configured in the global context before using this flow.\r\n> - This flow is critical for ensuring secure and authenticated interactions with Confluence and Pinecone APIs.\r\n\r\n## Author\r\n[Created by francois.brisson@qibb.com](mailto:francois.brisson@qibb.com)\r\n\r\n## qibb Docs\r\n[üìö qibb Platform Documentation](https://docs.qibb.com/platform/latest/)",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 220,
                "wires": [
                    {
                        "id": "3f9e95e7f7a71ea7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 180,
                "wires": [
                    {
                        "id": "3f9e95e7f7a71ea7",
                        "port": 0
                    }
                ]
            },
            {
                "x": 360,
                "y": 260,
                "wires": [
                    {
                        "id": "3f9e95e7f7a71ea7",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DEBD5C",
        "icon": "font-awesome/fa-database",
        "status": {
            "x": 280,
            "y": 80,
            "wires": [
                {
                    "id": "4f68b793021e13a7",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "269b642acef88503",
        "type": "group",
        "z": "bb119fa58e5b3485",
        "name": "[0] Webhook Receive",
        "style": {
            "label": true
        },
        "nodes": [
            "ccf39b06e755c073",
            "a403b999625db33d",
            "c94ee39be02badaa",
            "7fc236749081c4f8",
            "6ebb50cb76f0c2ec"
        ],
        "x": 54,
        "y": 39,
        "w": 362,
        "h": 262
    },
    {
        "id": "4e89c03817358d25",
        "type": "group",
        "z": "bb119fa58e5b3485",
        "name": "[2] Iconik Auth",
        "style": {
            "label": true
        },
        "nodes": [
            "80369f7995b0a4cc",
            "84e099d8f84ae022",
            "80b502eb86aee4bc",
            "f4319404be2c2735",
            "26f513247a55ca64",
            "73f1b5ffaabb36a3"
        ],
        "x": 714,
        "y": 39,
        "w": 252,
        "h": 262
    },
    {
        "id": "d29e7cdb2d5dd084",
        "type": "group",
        "z": "bb119fa58e5b3485",
        "name": "[0] Manual payload",
        "style": {
            "label": true
        },
        "nodes": [
            "inject_asset_id",
            "template_create_payload",
            "187792eede51b3c7",
            "4ba858c9bd77a3a7",
            "6ce865beef8237c8"
        ],
        "x": 54,
        "y": 319,
        "w": 272,
        "h": 202
    },
    {
        "id": "d69961b899aa3d05",
        "type": "group",
        "z": "bb119fa58e5b3485",
        "name": "[1] Get Secret",
        "style": {
            "label": true
        },
        "nodes": [
            "13443591230511c3",
            "7216e47d5518efdb",
            "29ee64773863c673",
            "b0f74a4e97da0dc1"
        ],
        "x": 434,
        "y": 39,
        "w": 252,
        "h": 262,
        "info": "# Flow Get Secrets\n\n## Description\nThis flow retrieves secrets related to Gemini and Iconik from the global context (`global.get`) and validates their presence. If any secret is missing, an error is returned with a descriptive message. The retrieved secrets are then packaged into a `msg.secret` object for further use.\n\n## Nodes\n| Node ID | Node Type | Node Name |\n|---------|-----------|-----------|\n| 4f68b793021e13a7 | status     | (Unnamed) |\n| 3f9e95e7f7a71ea7 | function   | Get Secrets |\n| f9847233de5b9a97 | comment    | [1] üìñ Doc - Get Secrets |\n\n## Input\n- **Trigger:**\n  - No specific input is required. The function node retrieves secrets from the global context.\n- **Context / Global Vars:**\n  - `SECRETS.GEMINI_API_KEY`\n  - `SECRETS.GEMINI_MODEL`\n  - `SECRETS.ICONIK_BASE_URL`\n  - `SECRETS.ICONIK_PASSWORD`\n  - `SECRETS.ICONIK_USERNAME`\n\n## Output\n- **Success Path:**\n  - If all secrets are present:\n    - `msg.secret` contains the retrieved secrets as an object:\n      ```json\n      {\n        \"GeminiApiKey\": \"...\",\n        \"GeminiModel\": \"...\",\n        \"IconikBaseUrl\": \"...\",\n        \"IconikPassword\": \"...\",\n        \"IconikUsername\": \"...\"\n      }\n      ```\n    - `msg.statusCode` is set to `200`.\n    - The message is sent to Output 1.\n- **Error Path:**\n  - If any secret is missing:\n    - `msg.error` contains a descriptive error message (e.g., `Global.SECRETS.GEMINI_API_KEY is not set. Please Check Space SECRET`).\n    - `msg.statusCode` is set to `404`.\n    - The message is sent to Output 2.\n\n## Notes\n> - Ensure that the required secrets are properly configured in the global context before using this flow.\n> - This flow is critical for ensuring secure and authenticated interactions with Gemini and Iconik APIs.\n\n## Author\n[Created by francois.brisson@qibb.com](mailto:francois.brisson@qibb.com)\n\n## qibb Docs\n[üìö qibb Platform Documentation](https://docs.qibb.com/platform/latest/)"
    },
    {
        "id": "4f68b793021e13a7",
        "type": "status",
        "z": "97b77bc4b98052be",
        "name": "",
        "scope": null,
        "x": 160,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "3f9e95e7f7a71ea7",
        "type": "function",
        "z": "97b77bc4b98052be",
        "name": "Get Secrets",
        "func": "// Retrieve secrets from global context (Vault)\nvar GeminiApiKey = global.get(\"SECRETS.GEMINI_API_KEY\");\nvar GeminiModel = global.get(\"SECRETS.GEMINI_MODEL\");\nvar IconikBaseUrl = global.get(\"SECRETS.ICONIK_BASE_URL\");\nvar IconikPassword = global.get(\"SECRETS.ICONIK_PASSWORD\");\nvar IconikUsername = global.get(\"SECRETS.ICONIK_USERNAME\");\n\n// Check for each required secret individually\nif (!GeminiApiKey) {\n    node.error(\"‚ùå Global.SECRETS.GEMINI_API_KEY is not set. Please Check Space SECRET\");\n    msg.error = \"Global.SECRETS.GEMINI_API_KEY is not set. Please Check Space SECRET\";\n    msg.statusCode = 404;\n    return [null, msg]; \n}\n\nif (!GeminiModel) {\n    node.error(\"‚ùå Global.SECRETS.GEMINI_MODEL is not set. Please Check Space SECRET\");\n    msg.error = \"Global.SECRETS.GEMINI_MODEL is not set. Please Check Space SECRET\";\n    msg.statusCode = 404;\n    return [null, msg];\n}\n\nif (!IconikBaseUrl) {\n    node.error(\"‚ùå Global.SECRETS.ICONIK_BASE_URL is not set. Please Check Space SECRET\");\n    msg.error = \"Global.SECRETS.ICONIK_BASE_URL is not set. Please Check Space SECRET\";\n    msg.statusCode = 404;\n    return [null, msg];\n}\n\nif (!IconikPassword) {\n    node.error(\"‚ùå Global.SECRETS.ICONIK_PASSWORD is not set. Please Check Space SECRET\");\n    msg.error = \"Global.SECRETS.ICONIK_PASSWORD is not set. Please Check Space SECRET\";\n    msg.statusCode = 404;\n    return [null, msg];\n}\n\nif (!IconikUsername) {\n    node.error(\"‚ùå Global.SECRETS.ICONIK_USERNAME is not set. Please Check Space SECRET\");\n    msg.error = \"Global.SECRETS.ICONIK_USERNAME is not set. Please Check Space SECRET\";\n    msg.statusCode = 404;\n    return [null, msg];\n}\n\n// Construct the message secret\nmsg.secret = {\n    \"GeminiApiKey\": GeminiApiKey,\n    \"GeminiModel\": GeminiModel,\n    \"IconikBaseUrl\": IconikBaseUrl,\n    \"IconikPassword\": IconikPassword,\n    \"IconikUsername\": IconikUsername\n};\n\nmsg.statusCode = 200;\n\nreturn [msg, null]; // All good, send to output 1\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 220,
        "wires": [
            [],
            []
        ],
        "info": "# Flow Get Secrets\n\n## Description\nThis flow retrieves secrets related to Confluence and Pinecone (email, token, URL, and API key) from the global context (`global.get`) and validates their presence. If any secret is missing, an error is returned with a descriptive message.\n\n## Input\n- **Trigger:**\n  - No specific input is required. The function node retrieves secrets from the global context.\n- **Context / Global Vars:**\n  - `SECRETS.confluence_email`\n  - `SECRETS.confluence_token`\n  - `SECRETS.confluence_url`\n  - `SECRETS.pinecone_ApiKey`\n- **Expected Secrets:**\n  - `confluence_email`: The email address for Confluence authentication.\n  - `confluence_token`: The API token for Confluence authentication.\n  - `confluence_url`: The base URL for the Confluence API.\n  - `pinecone_ApiKey`: The API key for Pinecone services.\n\n## Output\n- **Success Path:**\n  - If all secrets are present:\n    - `msg.secret` contains the retrieved secrets as an object:\n      ```json\n      {\n        \"confluence_email\": \"...\",\n        \"confluence_token\": \"...\",\n        \"confluence_url\": \"...\",\n        \"pinecone_apiKey\": \"...\"\n      }\n      ```\n    - `msg.statusCode` is set to `200`.\n    - The message is sent to Output 1.\n- **Error Path:**\n  - If any secret is missing:\n    - `msg.error` contains a descriptive error message (e.g., `Global.SECRETS.confluence_email is not set. Please Check Space SECRET`).\n    - `msg.statusCode` is set to `404`.\n    - The message is sent to Output 2.\n\n## Notes\n> - Ensure that the required secrets are properly configured in the global context before using this flow.\n> - This flow is critical for ensuring secure and authenticated interactions with Confluence and Pinecone APIs.\n\n## Author\n[Created by francois.brisson@qibb.com](mailto:francois.brisson@qibb.com)\n\n## qibb Docs\n[üìö qibb Platform Documentation](https://docs.qibb.com/platform/latest/)"
    },
    {
        "id": "a1b2c3d4e5f67890",
        "type": "comment",
        "z": "97b77bc4b98052be",
        "name": "[1] üìñ Doc - Get Secrets",
        "info": "# Flow Get Secrets\n\n## Description\nThis flow retrieves secrets related to Gemini and Iconik from the global context (`global.get`) and validates their presence. If any secret is missing, an error is returned with a descriptive message. The retrieved secrets are then packaged into a `msg.secret` object for further use.\n\n## Nodes\n| Node ID | Node Type | Node Name |\n|---------|-----------|-----------|\n| 4f68b793021e13a7 | status     | (Unnamed) |\n| 3f9e95e7f7a71ea7 | function   | Get Secrets |\n| f9847233de5b9a97 | comment    | [1] üìñ Doc - Get Secrets |\n\n## Input\n- **Trigger:**\n  - No specific input is required. The function node retrieves secrets from the global context.\n- **Context / Global Vars:**\n  - `SECRETS.GEMINI_API_KEY`\n  - `SECRETS.GEMINI_MODEL`\n  - `SECRETS.ICONIK_BASE_URL`\n  - `SECRETS.ICONIK_PASSWORD`\n  - `SECRETS.ICONIK_USERNAME`\n\n## Output\n- **Success Path:**\n  - If all secrets are present:\n    - `msg.secret` contains the retrieved secrets as an object:\n      ```json\n      {\n        \"GeminiApiKey\": \"...\",\n        \"GeminiModel\": \"...\",\n        \"IconikBaseUrl\": \"...\",\n        \"IconikPassword\": \"...\",\n        \"IconikUsername\": \"...\"\n      }\n      ```\n    - `msg.statusCode` is set to `200`.\n    - The message is sent to Output 1.\n- **Error Path:**\n  - If any secret is missing:\n    - `msg.error` contains a descriptive error message (e.g., `Global.SECRETS.GEMINI_API_KEY is not set. Please Check Space SECRET`).\n    - `msg.statusCode` is set to `404`.\n    - The message is sent to Output 2.\n\n## Notes\n> - Ensure that the required secrets are properly configured in the global context before using this flow.\n> - This flow is critical for ensuring secure and authenticated interactions with Gemini and Iconik APIs.\n\n## Author\n[Created by francois.brisson@qibb.com](mailto:francois.brisson@qibb.com)\n\n## qibb Docs\n[üìö qibb Platform Documentation](https://docs.qibb.com/platform/latest/)",
        "x": 480,
        "y": 80,
        "wires": [],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "413d709fa3d4b4a0",
        "type": "qibb-secret-manager-sync",
        "z": "3887a97abab1ae29",
        "name": "",
        "SYNC_PERIOD": "30min",
        "SYNC_ON_DEPLOY": true,
        "x": 120,
        "y": 40,
        "wires": []
    },
    {
        "id": "ccf39b06e755c073",
        "type": "http in",
        "z": "bb119fa58e5b3485",
        "g": "269b642acef88503",
        "name": "",
        "url": "webhooks/vision",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 200,
        "wires": [
            [
                "a403b999625db33d",
                "c94ee39be02badaa",
                "6ebb50cb76f0c2ec"
            ]
        ]
    },
    {
        "id": "a403b999625db33d",
        "type": "http response",
        "z": "bb119fa58e5b3485",
        "g": "269b642acef88503",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 235,
        "y": 260,
        "wires": [],
        "l": false
    },
    {
        "id": "c94ee39be02badaa",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "g": "269b642acef88503",
        "name": "Debug OK: Webhook Receive",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload.asset_ids[0]",
        "statusType": "msg",
        "x": 275,
        "y": 140,
        "wires": [],
        "icon": "font-awesome/fa-check-circle-o",
        "l": false
    },
    {
        "id": "7fc236749081c4f8",
        "type": "comment",
        "z": "bb119fa58e5b3485",
        "g": "269b642acef88503",
        "name": "[0] üìñ Doc - Webhook Receive",
        "info": "",
        "x": 200,
        "y": 80,
        "wires": [],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "80369f7995b0a4cc",
        "type": "change",
        "z": "bb119fa58e5b3485",
        "g": "4e89c03817358d25",
        "name": "Save Asset ID & Set Credentials",
        "rules": [
            {
                "t": "set",
                "p": "assetId",
                "pt": "msg",
                "to": "iconik.webhook.asset_ids[0]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 755,
        "y": 200,
        "wires": [
            [
                "80b502eb86aee4bc"
            ]
        ],
        "l": false
    },
    {
        "id": "84e099d8f84ae022",
        "type": "change",
        "z": "bb119fa58e5b3485",
        "g": "4e89c03817358d25",
        "name": "Save Auth Headers",
        "rules": [
            {
                "t": "set",
                "p": "authHeaders",
                "pt": "msg",
                "to": "headers",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 915,
        "y": 200,
        "wires": [
            [
                "f60f93918df2a827"
            ]
        ],
        "l": false
    },
    {
        "id": "f4319404be2c2735",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "g": "4e89c03817358d25",
        "name": "Debug Error: Auth Iconik",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 835,
        "y": 260,
        "wires": [],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "26f513247a55ca64",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "g": "4e89c03817358d25",
        "name": "Debug OK: Auth Iconik",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 835,
        "y": 140,
        "wires": [],
        "icon": "font-awesome/fa-check-circle-o",
        "l": false
    },
    {
        "id": "73f1b5ffaabb36a3",
        "type": "comment",
        "z": "bb119fa58e5b3485",
        "g": "4e89c03817358d25",
        "name": "[2] üìñ Doc - Iconik Auth",
        "info": "",
        "x": 840,
        "y": 80,
        "wires": [],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "inject_asset_id",
        "type": "inject",
        "z": "bb119fa58e5b3485",
        "g": "d29e7cdb2d5dd084",
        "name": "Inject Asset ID",
        "props": [
            {
                "p": "asset_id",
                "v": "4b253e98-ed08-11ee-9fe1-eea6f5037aef",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 115,
        "y": 480,
        "wires": [
            [
                "template_create_payload"
            ]
        ],
        "l": false
    },
    {
        "id": "template_create_payload",
        "type": "template",
        "z": "bb119fa58e5b3485",
        "g": "d29e7cdb2d5dd084",
        "name": "Build Full Payload",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n  \"user_id\": \"49c7bd08-0e06-11f0-a1f8-a6363a946122\",\n  \"system_domain_id\": \"9e392c9c-e28e-11ec-8906-82ba1484052f\",\n  \"context\": \"ASSET\",\n  \"action_id\": \"66ed6750-459f-11ef-afd9-1ec546efc4f6\",\n  \"asset_ids\": [\"{{asset_id}}\"],\n  \"collection_ids\": [],\n  \"saved_search_ids\": [],\n  \"metadata_view_id\": null,\n  \"metadata_values\": null,\n  \"date_created\": \"2025-06-04T07:20:34.362212\"\n}",
        "output": "json",
        "x": 175,
        "y": 480,
        "wires": [
            [
                "6ce865beef8237c8"
            ]
        ],
        "l": false
    },
    {
        "id": "187792eede51b3c7",
        "type": "comment",
        "z": "bb119fa58e5b3485",
        "g": "d29e7cdb2d5dd084",
        "name": "[0] üìñ Doc - Manual payload",
        "info": "",
        "x": 190,
        "y": 360,
        "wires": [],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "80b502eb86aee4bc",
        "type": "iconik-auth",
        "z": "bb119fa58e5b3485",
        "g": "4e89c03817358d25",
        "name": "",
        "ICONIK_BASE_URL": "https://app.iconik.io",
        "ICONIK_EMAIL": "r.holzhause@techtriq.com",
        "ICONIK_PASSWORD": {
            "type": "cred",
            "value": "ftoeK1ytV9iG89GEFZagD2vHfbLncmuA0t6uyzrvTEtoBTRPVzCB6br8UM3jvPzk"
        },
        "x": 835,
        "y": 200,
        "wires": [
            [
                "84e099d8f84ae022",
                "26f513247a55ca64"
            ],
            [
                "f4319404be2c2735"
            ]
        ],
        "l": false
    },
    {
        "id": "13443591230511c3",
        "type": "subflow:97b77bc4b98052be",
        "z": "bb119fa58e5b3485",
        "g": "d69961b899aa3d05",
        "name": "",
        "x": 555,
        "y": 200,
        "wires": [
            [
                "7216e47d5518efdb",
                "80369f7995b0a4cc"
            ],
            [
                "29ee64773863c673"
            ]
        ],
        "l": false,
        "info": "# Flow Get Secrets\n\n## Description\nThis flow retrieves Confluence-related secrets (email, token, and URL) from the global context (`global.get`) and validates their presence. If any secret is missing, an error is returned with a descriptive message.\n\n## Input\n- **Trigger:**\n  - No specific input is required. The function node retrieves secrets from the global context.\n- **Context / Global Vars:**\n  - `SECRETS.confluence_email`\n  - `SECRETS.confluence_token`\n  - `SECRETS.confluence_url`\n- **Expected Secrets:**\n  - `confluence_email`: The email address for Confluence authentication.\n  - `confluence_token`: The API token for Confluence authentication.\n  - `confluence_url`: The base URL for the Confluence API.\n\n## Output\n- **Success Path:**\n  - If all secrets are present:\n    - `msg.secret` contains the retrieved secrets as an object:\n      ```json\n      {\n        \"confluence_email\": \"...\",\n        \"confluence_token\": \"...\",\n        \"confluence_url\": \"...\"\n      }\n      ```\n    - `msg.statusCode` is set to `200`.\n    - The message is sent to Output 1.\n- **Error Path:**\n  - If any secret is missing:\n    - `msg.error` contains a descriptive error message (e.g., `Global.SECRETS.confluence_email is not set. Please Check Space SECRET`).\n    - `msg.statusCode` is set to `404`.\n    - The message is sent to Output 2.\n\n## Notes\n> - Ensure that the required secrets are properly configured in the global context before using this flow.\n> - This flow is critical for ensuring secure and authenticated interactions with the Confluence API.\n\n## Author\n[Created by francois.brisson@qibb.com](mailto:francois.brisson@qibb.com)\n\n## qibb Docs\n[üìö qibb Platform Documentation](https://docs.qibb.com/platform/latest/)\n"
    },
    {
        "id": "7216e47d5518efdb",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "g": "d69961b899aa3d05",
        "name": "Debug OK: Get Secret",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 555,
        "y": 140,
        "wires": [],
        "icon": "font-awesome/fa-check-circle-o",
        "l": false,
        "info": "# Flow Debug Get Secret\n\n## Description\nThis `Debug` node is used to verify the successful retrieval of secrets. It logs the full message object (`msg`) to the debug sidebar and displays the `msg.statusCode` in the node's status field for quick monitoring.\n\n## Input\n- **Trigger:**\n  - The node is triggered by the output of a preceding node in the flow, typically after a secret retrieval process.\n- **Context / Global Vars:** None required.\n- **Expected Secrets:** None required.\n\n## Output\n- **Success Path:**\n  - Logs the full incoming message (`msg`) to the debug sidebar.\n  - Displays the `msg.statusCode` in the node's status field for quick reference.\n  - Outputs the message for further processing if connected downstream.\n- **Error Path:**\n  - This node does not handle errors but can be used to inspect issues in the incoming message.\n\n## Notes\n> - The debug node is disabled by default. Enable it to view logs in the debug sidebar.\n> - Use this node during development or troubleshooting to ensure secrets are being retrieved and processed correctly.\n> - The `msg.statusCode` is displayed in the node's status field for quick monitoring of the HTTP response status.\n\n## Author\n[Created by francois.brisson@qibb.com](mailto:francois.brisson@qibb.com)\n\n## qibb Docs\n[üìö qibb Platform Documentation](https://docs.qibb.com/platform/latest/)\n"
    },
    {
        "id": "29ee64773863c673",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "g": "d69961b899aa3d05",
        "name": "Debug Error: Get Secret",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 555,
        "y": 260,
        "wires": [],
        "icon": "node-red/alert.svg",
        "l": false,
        "info": "# Flow Debug Error Get Secret\n\n## Description\nThis `Debug` node is used to log and inspect errors that occur during the secret retrieval process. It captures the full message object (`msg`) and displays the `msg.statusCode` in the node's status field for quick monitoring.\n\n## Input\n- **Trigger:**\n  - The node is triggered by the output of a preceding node in the flow, typically when an error occurs during secret retrieval.\n- **Context / Global Vars:** None required.\n- **Expected Secrets:** None required.\n\n## Output\n- **Success Path:**\n  - Logs the full incoming message (`msg`) to the debug sidebar for inspection.\n  - Displays the `msg.statusCode` in the node's status field for quick reference.\n  - Outputs the message for further processing if connected downstream.\n- **Error Path:**\n  - This node does not handle errors but is used to inspect and debug issues in the incoming message.\n\n## Notes\n> - The debug node is enabled by default to assist in troubleshooting.\n> - Use this node during development or troubleshooting to identify and resolve issues in the secret retrieval process.\n> - The `msg.statusCode` is displayed in the node's status field for quick monitoring of the HTTP response status.\n\n## Author\n[Created by francois.brisson@qibb.com](mailto:francois.brisson@qibb.com)\n\n## qibb Docs\n[üìö qibb Platform Documentation](https://docs.qibb.com/platform/latest/)\n"
    },
    {
        "id": "b0f74a4e97da0dc1",
        "type": "comment",
        "z": "bb119fa58e5b3485",
        "g": "d69961b899aa3d05",
        "name": "[1] üìñ Doc - Get Secret",
        "info": "# Flow Get Secrets\n\n## Description\nThis flow retrieves secrets related to Gemini and Iconik from the global context (`global.get`) and validates their presence. If any secret is missing, an error is returned with a descriptive message. The retrieved secrets are then packaged into a `msg.secret` object for further use.\n\n## Nodes\n| Node ID | Node Type | Node Name |\n|---------|-----------|-----------|\n| 4f68b793021e13a7 | status     | (Unnamed) |\n| 3f9e95e7f7a71ea7 | function   | Get Secrets |\n| f9847233de5b9a97 | comment    | [1] üìñ Doc - Get Secrets |\n\n## Input\n- **Trigger:**\n  - No specific input is required. The function node retrieves secrets from the global context.\n- **Context / Global Vars:**\n  - `SECRETS.GEMINI_API_KEY`\n  - `SECRETS.GEMINI_MODEL`\n  - `SECRETS.ICONIK_BASE_URL`\n  - `SECRETS.ICONIK_PASSWORD`\n  - `SECRETS.ICONIK_USERNAME`\n\n## Output\n- **Success Path:**\n  - If all secrets are present:\n    - `msg.secret` contains the retrieved secrets as an object:\n      ```json\n      {\n        \"GeminiApiKey\": \"...\",\n        \"GeminiModel\": \"...\",\n        \"IconikBaseUrl\": \"...\",\n        \"IconikPassword\": \"...\",\n        \"IconikUsername\": \"...\"\n      }\n      ```\n    - `msg.statusCode` is set to `200`.\n    - The message is sent to Output 1.\n- **Error Path:**\n  - If any secret is missing:\n    - `msg.error` contains a descriptive error message (e.g., `Global.SECRETS.GEMINI_API_KEY is not set. Please Check Space SECRET`).\n    - `msg.statusCode` is set to `404`.\n    - The message is sent to Output 2.\n\n## Notes\n> - Ensure that the required secrets are properly configured in the global context before using this flow.\n> - This flow is critical for ensuring secure and authenticated interactions with Gemini and Iconik APIs.\n\n## Author\n[Created by francois.brisson@qibb.com](mailto:francois.brisson@qibb.com)\n\n## qibb Docs\n[üìö qibb Platform Documentation](https://docs.qibb.com/platform/latest/)",
        "x": 560,
        "y": 80,
        "wires": [],
        "icon": "font-awesome/fa-book"
    },
    {
        "id": "4ba858c9bd77a3a7",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "g": "d29e7cdb2d5dd084",
        "name": "Debug OK: Manual Payload",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "iconik.webhook.asset_ids[0]",
        "statusType": "msg",
        "x": 255,
        "y": 420,
        "wires": [],
        "icon": "font-awesome/fa-check-circle-o",
        "l": false
    },
    {
        "id": "6ebb50cb76f0c2ec",
        "type": "change",
        "z": "bb119fa58e5b3485",
        "g": "269b642acef88503",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "iconik.webhook",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 375,
        "y": 200,
        "wires": [
            [
                "13443591230511c3"
            ]
        ],
        "l": false
    },
    {
        "id": "6ce865beef8237c8",
        "type": "change",
        "z": "bb119fa58e5b3485",
        "g": "d29e7cdb2d5dd084",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "iconik.webhook",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 255,
        "y": 480,
        "wires": [
            [
                "4ba858c9bd77a3a7",
                "13443591230511c3"
            ]
        ],
        "l": false
    },
    {
        "id": "d7f2baca4a091580",
        "type": "change",
        "z": "bb119fa58e5b3485",
        "name": "Save Media type",
        "rules": [
            {
                "t": "set",
                "p": "mediaType",
                "pt": "msg",
                "to": "iconik.output.payload.objects[0].metadata[0].internet_media_type",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "authHeaders",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "iconik.get_format",
                "pt": "msg",
                "to": "iconik.output",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1115,
        "y": 200,
        "wires": [
            [
                "62e2db5dec5eeda8"
            ]
        ],
        "l": false
    },
    {
        "id": "f60f93918df2a827",
        "type": "iconik-files-client",
        "z": "bb119fa58e5b3485",
        "name": "GET Asset Formats",
        "selectedOperation": {
            "method": "get",
            "path": "/v1/assets/{asset_id}/formats/",
            "summary": "Get all asset's formats",
            "description": "Get all asset's formats\n\nRequired roles:\n - can_read_formats\n",
            "tag": "Other",
            "operationId": "get_v1_assets__asset_id__formats_"
        },
        "api": "api-0",
        "errorHandlingModeSelectedIndex": 1,
        "security": [],
        "requestContentTypeSelectedIndex": 0,
        "responseContentTypeSelectedIndex": 0,
        "parameters": [
            {
                "name": "asset_id",
                "value": "asset_id",
                "in": "path",
                "refType": "msg"
            },
            {
                "name": "per_page",
                "value": "",
                "in": "query",
                "refType": "type"
            },
            {
                "name": "last_id",
                "value": "",
                "in": "query",
                "refType": "type"
            }
        ],
        "uiFeatures": {
            "operations": {
                "advancedMode": true
            }
        },
        "outputs": 2,
        "output": "iconik.output",
        "host": {
            "type": "string",
            "value": "",
            "refType": "type"
        },
        "x": 1035,
        "y": 200,
        "wires": [
            [
                "35b8dea63f9feb3a",
                "d7f2baca4a091580"
            ],
            [
                "c1897c6216b8e8dc"
            ]
        ],
        "l": false
    },
    {
        "id": "35b8dea63f9feb3a",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "name": "Debug OK: Iconik Get Format",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "iconik.output.statusCode",
        "statusType": "msg",
        "x": 1035,
        "y": 140,
        "wires": [],
        "icon": "font-awesome/fa-check-circle-o",
        "l": false
    },
    {
        "id": "c1897c6216b8e8dc",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "name": "Debug Error: Iconik Get Format",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "iconik.output.statusCode",
        "statusType": "msg",
        "x": 1035,
        "y": 260,
        "wires": [],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "62e2db5dec5eeda8",
        "type": "function",
        "z": "bb119fa58e5b3485",
        "name": "Check MediaType",
        "func": "// Define supported media types for images and videos\nconst supportedMediaTypes = {\n  image: [\"image/jpeg\", \"image/png\", \"image/webp\", \"image/heic\", \"image/heif\"],\n  video: [\"video/mp4\", \"video/mpeg\", \"video/mov\", \"video/avi\", \"video/x-flv\", \"video/mpg\", \"video/webm\", \"video/wmx\", \"video/3gpp\"]\n};\n\n// Extract the media type from the incoming message\nconst assetMediaType = msg.mediaType;\n\n// Function to check if the media type is supported\nconst isSupportedMediaType = (type, mediaType) => supportedMediaTypes[type].includes(mediaType);\n\ntry {\n  // Validate the media type\n  if (!isSupportedMediaType('image', assetMediaType) && !isSupportedMediaType('video', assetMediaType)) {\n    // If unsupported, set the error message and supported media types\n    msg.statusInfo = `The selected asset has a media type of \"${assetMediaType}\", which is not among the supported media types. Please choose a compatible media type.`;\n    msg.supportedMediaTypes = supportedMediaTypes;\n    msg.statusCode = 400; // Set status code for unsupported media type\n    return [null, msg]; // Send to output 2\n  } else {\n    // If supported, set a success message\n    msg.statusInfo = `The selected asset has a supported media type: \"${assetMediaType}\".`;\n    msg.statusCode = 200; // Set status code for supported media type\n    return [msg, null]; // Send to output 1\n  }\n} catch (error) {\n  // Handle unexpected errors\n  node.error(\"An error occurred while checking the media type\", msg);\n  msg.statusInfo = \"An internal error occurred.\";\n  msg.statusCode = 500; // Set status code for internal error\n  return [null, msg]; // Send to output 2\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 715,
        "y": 420,
        "wires": [
            [
                "016fac0e773e7897"
            ],
            [
                "c6921afbb473bc70"
            ]
        ],
        "l": false,
        "info": "# Check MediaType\n\n## Purpose\nThis function node checks if the provided media type is supported for processing. It categorizes media types into `image` and `video` and validates the input against predefined lists of supported types.\n\n## Input\n- `msg.mediaType`: A string representing the media type of the asset (e.g., `image/jpeg`, `video/mp4`).\n\n## Output\n- **Output 1**: For supported media types.\n  - `msg.payload`: A success message indicating the media type is supported.\n  - `msg.statusCode`: `200` (HTTP status code for success).\n- **Output 2**: For unsupported media types or errors.\n  - `msg.payload`: An error message indicating the media type is unsupported or an internal error occurred.\n  - `msg.supportedMediaTypes`: An object listing all supported media types.\n  - `msg.statusCode`: `400` for unsupported media types, `500` for internal errors.\n\n## Logic\n1. Define supported media types for `image` and `video` categories.\n2. Extract the `mediaType` from the incoming `msg` object.\n3. Check if the `mediaType` exists in either the `image` or `video` list.\n4. If unsupported:\n   - Set an error message and include the list of supported media types.\n   - Set `msg.statusCode` to `400` and send the message to **Output 2**.\n5. If supported:\n   - Set a success message.\n   - Set `msg.statusCode` to `200` and send the message to **Output 1**.\n6. Handle unexpected errors by setting an internal error message and `msg.statusCode` to `500`.\n\n## Notes\n> Ensure the `msg.mediaType` field is provided in the input message. If missing, the function will treat it as unsupported.\n\n## Author\n[Created by francois.brisson@qibb.com](mailto:francois.brisson@qibb.com)\n\n## qibb Docs\n[üìö qibb Platform Documentation](https://docs.qibb.com/platform/latest/)"
    },
    {
        "id": "c6921afbb473bc70",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "name": "Debug OK: Check MediaType",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusInfo",
        "statusType": "msg",
        "x": 715,
        "y": 480,
        "wires": [],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "016fac0e773e7897",
        "type": "debug",
        "z": "bb119fa58e5b3485",
        "name": "Debug OK: Check MediaType",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusInfo",
        "statusType": "msg",
        "x": 715,
        "y": 360,
        "wires": [],
        "icon": "font-awesome/fa-check-circle-o",
        "l": false
    }
]